<?php
/**
 * @file
 * Code for the PLAY Library Program feature.
 */

include_once 'play_library_program.features.inc';

/**
 * Implements hook_menu().
 */
function play_library_program_menu() {

  $items = array();

  $items['play-library-program/add/activity/%/%'] = array(
    'title' => 'Complete Activity',
    'page callback' => 'play_library_program_complete_activity',
    'page arguments' => array(3, 4),
    'access callback' => 'play_library_program_access_activity_entry',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  $items['play-library-program/add/raffle_winner/%/%'] = array(
    'title' => 'Complete Activity',
    'page callback' => 'play_library_program_create_raffle_winner',
    'page arguments' => array(3, 4),
    'access callback' => 'user_access',
    'access arguments' => array('eck add raffle raffle_winner entities'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_alter()
 */
function play_library_program_form_alter(&$form, &$form_state, $form_id){
  if($form_id == 'eck__entity__form_edit_activity_activity' || $form_id == 'eck__entity__form_add_activity_activity'){
    $form['title']['#title'] = 'Name of Activity';
  }
}

/**
 * Access control to access activity entry creation.
 */
function play_library_program_access_activity_entry($activity_id) {

  global $user;
  $activities = entity_load('activity', array($activity_id));
  $activity = reset($activities);
  $points = intval($activity->field_activity_points[LANGUAGE_NONE][0]['value']);
  $daily_limit = FALSE;
  $current_participation_count = play_library_program_retrieve_activity_participation($activity_id, $user->uid);

  if ($current_participation_count > 0) {
    $last_entry = db_query("SELECT created FROM {eck_activity} WHERE uid = :uid ORDER BY created DESC LIMIT 1", array(':uid' => $user->uid))->fetchField();
    if ((time() - $activity->field_activity_time_limit[LANGUAGE_NONE][0]['value']) < $last_entry) {
      return FALSE;
    }
  }

  if ($points > 0 && $current_participation_count <= $activity->field_activity_limit[LANGUAGE_NONE][0]['value']) {
    return user_access('eck add activity activity_entry entities') || user_access('eck add activity entities') || user_access('eck add entities');
  }

  return FALSE;
}

/**
 *  Condition for activity frequecy limit;
 */
function play_library_program_frequency_limit($activity) {

  global $user;
  $activity_requency_limit = $activity->field_activity_time_limit[LANGUAGE_NONE][0]['value'];
  $last_entry = db_query("SELECT created FROM {eck_activity} WHERE uid = :uid ORDER BY created DESC LIMIT 1", array(':uid' => $user->uid))->fetchField();
  if((time() - $activity_requency_limit) < $last_entry) {    
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Condition for activity start date and end date;
 */
function play_library_program_activity_time_limit($activity) {

  $activity_start_date = strtotime($activity->field_start_date[LANGUAGE_NONE][0]['value']);
  $activity_end_date = strtotime($activity->field_start_date[LANGUAGE_NONE][0]['value2']);
  $current_time = time();
  if($activity_start_date <= $current_time && $current_time <=  $activity_end_date) {
    return TRUE;
  }
  else {
    return FALSE;
  }
} 
 
/**
 * Implements hook_block_info().
 */
function play_library_program_block_info() {

  $blocks = array();

  $blocks['activities'] = array(
    'info' => t('PLAY Program activities'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function play_library_program_block_view($delta = '') {

  $block = array();

  if ($delta == 'activities') {
    $pending_activities = array();
    $completed_activities = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'activity');
    $query->entityCondition('bundle', 'activity');
    $query->fieldCondition('field_activity_fired_hook', 'value', 'via_block');
    $result = $query->execute();

    foreach ($result as $entity_key => $entity_values) {
      if ($entity_key == 'activity') {
        foreach ($entity_values as $entity) {
          $activities = entity_load('activity', array($entity->id));
          $activity = reset($activities);
          if (play_library_program_access_activity_entry($entity->id)) {
            $pending_activities[] = l($activity->title, "play-library-program/add/activity/{$activity->id}/nojs");
          }
          else {
            $completed_activities[] = check_plain($activity->title);
          }
        }
      }
    }

    $block['subject'] = t('What did you do today?');
    $block['content'] = theme('play_library_program_activities_block', array('pending' => $pending_activities, 'completed' => $completed_activities));
    }

  return $block;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function play_library_program_field_widget_form_alter(&$element, &$form_state, $context) {

  if (isset($element['value']['#field_name']) && $element['value']['#field_name'] == 'field_activity_fired_hook') {
    $options = array(
      'via_block' => t('- Select Firing Hook -'),
      'user_insert' => t(variable_get('user_insert')) ? t(variable_get('user_insert')) : t('User is Inserted'),
    );

    // For now, only deal with nodes and other ECK content models.
    $entities = entity_get_info();

    foreach($entities as $entity_key => $entity) {
      if ($entity_key == 'node') {
        $entity['module'] = 'node';
      }

      if (isset($entity['module']) && ($entity['module'] == 'eck' || $entity['module'] == 'node')) {
        foreach ($entity['bundles'] as $bundle_key => $bundle_options) {
          if($entity_key == 'node' && $bundle_options['label'] == 'sticker') {
            $options["node_update|node|{$bundle_key}|updated"] = t("@value", array('@value' => variable_get($bundle_key))) ? t("@value", array('@value' => variable_get($bundle_key))) : t('Calender ');
          }

          if ($entity_key == 'node' && ($bundle_options['label'] == 'Booklist' || $bundle_options['label'] == 'Book Review' || $bundle_options['label'] == 'Movie Review' || $bundle_options['label'] == 'Video Game Review' || $bundle_options['label'] == 'Music Review' || $bundle_options['label'] == 'Activity Review')) {
            $options["node_update|node|{$bundle_key}|published"] = t("@value", array( '@value' => variable_get($bundle_key))) ? t("@value", array( '@value' => variable_get($bundle_key))) : t("@value", array( '@value' => $bundle_options['label']));
          }
        }
      }
    }

    if (module_exists('poll')) {
      $options["Poll answer submitted"] = t("@value", array( '@value' => variable_get('poll')));
    }

    if (module_exists('webform')) {
      $webforms = _play_library_program_get_webforms();
      foreach ($webforms as $webform) {
        $options["webform_submit|{$webform->nid}"] = t("@value", array( '@value' => variable_get($webform->nid))) ? t("@value", array( '@value' => variable_get($webform->nid))) : t("@value", array( '@value' => $webform->title));
      }
    }

    $element['value']['#type'] = 'select';
    $element['value']['#options'] = $options;
    $element['value']['#size'] = 0;
  }
}

/**
 * Implements hook_user_insert(). change
 */
function play_library_program_user_insert(&$edit, $account, $category) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'activity');
    $query->entityCondition('bundle', 'activity');
    $query->fieldCondition('field_activity_fired_hook', 'value', 'user_insert');
    $result = $query->execute();
  
  // set user age in session to use in reward validation
  $_SESSION['user_birth_dt'] = strtotime($edit['profile_main']['field_user_birthday'][LANGUAGE_NONE][0]['value']);
    foreach ($result as $entity_key => $entity_values) {
        if ($entity_key == 'activity') {
            foreach ($entity_values as $entity) {
                play_library_program_create_activity_entry($entity->id, $account->uid);
            }
        }
    }
}

function play_library_program_node_presave($node) {
  
  if(function_exists('play_library_program_pl_is_program_active')){
    if(!pl_is_program_active()) {
      drupal_goto('home');
      return FALSE;
    }
  }
}

function play_library_program_webform_submission_presave($node, &$submission) {

  if(function_exists('play_library_program_pl_is_program_active')){
    if(!pl_is_program_active()) {
      drupal_goto('home');
      return FALSE;
    }
  }
}


/**
 * Implements hook_entity_insert().
 */
function play_library_program_entity_insert($entity, $type) { 

    if(function_exists('play_library_program_pl_is_program_active')){
      if(!pl_is_program_active()) {      
        return FALSE;
      } 
    }
   

    // Could be node, could be eck, could be something else, but easy to check.
    if (!isset($entity->type)) {
        return;
    }
    // Also hardcoding that we do not create *new* activity entries for an
    // activity entry.
    if ($entity->type !== 'activity_entry') {
        _play_library_program_invoke_activity_entry_hooks($entity, $type);
    }

    if ($entity->type == 'activity_entry') {
        _play_library_program_process_activity_entry($entity, $type);
    }

    if ($entity->type == 'reward_claim') {
        _play_library_program_process_user_reward_claim($entity, $type);
    }
}

/**
 * Implements hook_node_update().
 */
function play_library_program_node_update($node) {

    if ($node->status == NODE_PUBLISHED) {
        $current_node = node_load($node->nid);
        if ($current_node->status !== $node->status) {
            if($node->type == 'review_book' || $node->type == 'review_activity' || $node->type == 'movie_review' || $node->type == 'music_review' || $node->type == 'video_game_review') {
              $hook = "node_update|node|{$node->type}|published";
              _play_library_program_invoke_activity_entry_hooks($node, 'node', $hook);
              $node->workbench_moderation['updating_live_revision'] = 1;
            }
            else {
              $hook = "node_update|node|{$node->type}|published";
              _play_library_program_invoke_activity_entry_hooks($node, 'node', $hook);
            }
            
            
        }
    }
}

/**
 * Implements hook_webform_submission_insert().
 */
function play_library_program_webform_submission_insert($webform, $submission) {
    $hook = "webform_submit|{$webform->nid}";
    _play_library_program_invoke_activity_entry_hooks($submission, 'webform', $hook);
}

/**
 * Implements hook_theme().
 */
function play_library_program_theme($existing, $type, $theme, $path) {
    return array(
        'play_library_program_activities_block' => array(
            'variables' => array('pending' => NULL, 'completed' => NULL),
            'template' => 'play-library-program-activities-block',
        ),
    );
}

/**
 * Implements hook_userpoints().
 */
function play_library_program_userpoints($op, &$params = array()) {
    if ($op == 'points after') {
        $user_points = userpoints_get_current_points($params['uid']);
        $user_pre_points = $user_points - $params['points'];
        $tier_rewards = _play_library_program_get_global_reward_ids($user_pre_points, $user_points, $params['uid']);
        foreach ($tier_rewards as $rid) {
            play_library_program_create_reward_claim($rid, $params['uid']);
        }
    }
}

/**
 * Implements hook_action_info().
 */
function play_library_program_action_info() {
    return array(
        'play_library_program_assign_reward_action' => array(
            'label' => t('Assign reward to each user'),
            'type' => 'user',
            'configurable' => TRUE,
            'vbo_configurable' => TRUE,
            'triggers' => array('any'),
        ),
        'play_library_program_assign_userpoints_action' => array(
            'label' => t('Assign userpoints to each user'),
            'type' => 'user',
            'configurable' => TRUE,
            'vbo_configurable' => TRUE,
            'triggers' => array('any'),
        ),
    );
}

function play_library_program_assign_reward_action_form($context, $form_state) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'reward');
    $query->entityCondition('bundle', array('physical_reward', 'print_reward', 'reward', 'sticker'));
    $results = $query->execute();
    $rewards = entity_load('reward', array_keys($results['reward']));
    $rewards_options = array();
    foreach ($rewards as $reward) {
        $rewards_options[$reward->id] = t('@reward_title (@reward_type)', array('@reward_title' => $reward->title, '@reward_type' => $reward->type));
    }

    $form['reward'] = array(
        '#title' => t('Reward'),
        '#type' => 'select',
        '#options' => $rewards_options,
        '#description' => t('Which reward are we going to assign to users?'),
        '#default_value' => isset($context['author']) ? $context['author'] : '',
        '#required' => TRUE,
    );
    return $form;
}

function play_library_program_assign_reward_action_submit($form, $form_state) {
    return array('reward' => $form_state['values']['reward']);
}

/**
 * Assign reward action via bulk operation.
 */
function play_library_program_assign_reward_action($account, $context) {
    $reward_id = $context['reward'];
    $account_uid = $account->uid;
    play_library_program_create_reward_claim($reward_id, $account);
}

function play_library_program_assign_userpoints_action_form($context, $form_state) {
    $points = array();
    for ($i = 1; $i <= 10; $i++) {
        $points[$i] = $i;
    }
    $form['points'] = array(
        '#title' => t('Points'),
        '#type' => 'select',
        '#options' => $points,
        '#description' => t('How many points should the user receive?'),
        '#default_value' => isset($context['points']) ? $context['points'] : 1,
        '#required' => TRUE,
    );
    return $form;
}

function play_library_program_assign_userpoints_action_submit($form, $form_state) {
    return array('points' => $form_state['values']['points']);
}

/**
 * Assign reward action via bulk operation.
 */
function play_library_program_assign_userpoints_action($account, $context) {
    $userpoints_txn = array(
        'uid' => $account->uid,
        'points' => $context['points'],
    );
    userpoints_userpointsapi($userpoints_txn);
}

/**
 * Creates an activity entry for non-actioned items.
 */
function play_library_program_complete_activity($activity_id, $type = 'nojs') {
    global $user;
    $activity_entry = play_library_program_create_activity_entry($activity_id, $user->uid);
    if ($type == 'nojs') {
        drupal_goto('');
    }
}

/**
 * Creates a new raffle winner.
 */
function play_library_program_create_raffle_winner($raffle_id, $uid) {
    global $user;
    $raffles = entity_load('raffle', array($raffle_id));
    $raffle = reset($raffles);
    $title = t("@raffle winner on @time", array('@raffle' => $raffle->title, '@time' => date('Y-m-d H:i')));
    $raffle_winner = entity_create('raffle', array('type' => 'raffle_winner', 'title' => $title, 'uid' => $uid));
    $raffle_winner->field_raffle_winner_raffle[LANGUAGE_NONE][0]['target_id'] = $raffle->id;
    $raffle_winner->field_raffle_winner[LANGUAGE_NONE][0]['target_id'] = $uid;
    entity_save('raffle', $raffle_winner);
    //drupal_goto('raffle/raffle/' . $raffle_id);
}

/**
 * Retrieves how many times an activity has been performed.
 */
function play_library_program_retrieve_activity_participation($activity_id, $account_id) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'activity');
    $query->entityCondition('bundle', 'activity_entry');
    $query->propertyCondition('uid', $account_id);
    $query->fieldCondition('field_activity_entry_activity', 'target_id', $activity_id);
    return $query->count()->execute();
}

/**
 * Creates a new activity entry
 */
function play_library_program_create_activity_entry($activity_id, $account_id) {
    $activities = entity_load('activity', array($activity_id));
    $activity = reset($activities);

    $count_activity_entry = play_library_program_retrieve_activity_participation($activity_id, $account_id);
    $no_of_time_user_perform_activity = $activity->field_activity_limit[LANGUAGE_NONE][0]['value'];    
    $activity_point = $activity->field_activity_points[LANGUAGE_NONE][0]['value'];
    $title = t("@activity on @time", array('@activity' => $activity->title, '@time' => date('Y-m-d H:i')));
    $activity_entry = entity_create('activity', array('type' => 'activity_entry', 'title' => $title, 'uid' => $account_id, 'activity_points' => $activity_point));

    $activity_entry->field_activity_entry_activity[LANGUAGE_NONE][0]['target_id'] = $activity->id;
    $activity_entry->field_activity_point[LANGUAGE_NONE][0]['value'] = $activity_point;
    $activity_frequency_limit= play_library_program_frequency_limit($activity);
    $activity_time_limit = play_library_program_activity_time_limit($activity);
    
    if(($count_activity_entry < $no_of_time_user_perform_activity) && ($activity_frequency_limit == TRUE) && ($activity_time_limit == TRUE)) {        
      entity_save('activity', $activity_entry);
    }
    else {
       drupal_set_message(t('Thanks for your submission. However you will not receive any points as you have exceeded maximum number of submissions allowed for this activity'), 'warning');
    }
   
}

/**
 * Creates a new reward claim
 */
function play_library_program_create_reward_claim($reward_id, $account_id, $raffle_reward_claim = 0) {
    global $user;
    $uid = $user->uid;

  // query to check if reward is associates with raffle
  $que = db_select('eck_reward', 'eck_r');
  $que->join('field_data_field_reward_raffle', 're_ra', 'eck_r.id = re_ra.entity_id');
  $que->join('eck_raffle', 'eck_rf', 'eck_rf.id = re_ra.field_reward_raffle_target_id');
  $que->condition('eck_r.id', $reward_id);
  $que->condition('eck_rf.type', 'raffle');
  $que->fields('eck_rf', array('type'));
  $res = $que->execute();
  $is_raffle_reward = $res->rowCount();
  
  // raffle entry will only happen if the current reward_id is linked to a raffle and 
  // we are not claimimg raffle reward 
  if($is_raffle_reward && !$raffle_reward_claim) {
      $que = db_select('eck_reward', 'eck_r');
      $que->join('field_data_field_reward_raffle', 're_ra', 'eck_r.id = re_ra.entity_id');
      $que->join('eck_raffle', 'eck_rf', 'eck_rf.id = re_ra.field_reward_raffle_target_id');
      $que->condition('eck_r.id', $reward_id, '=');
      $que->fields('eck_rf', array('id'));
      $re = $que->execute()->fetchField();
 
      play_library_program_create_raffle_entry($re, $account_id);
    } else {
        $rewards = entity_load('reward', array($reward_id));
        $reward = reset($rewards);
        $title = t("@reward on @time", array('@reward' => $reward->title, '@time' => date('Y-m-d H:i')));
        $reward_claim = entity_create('reward', array('type' => 'reward_claim', 'title' => $title, 'uid' => $account_id));
        $reward_claim->field_reward_claim_id[LANGUAGE_NONE][0]['target_id'] = $reward->id;
          entity_save('reward', $reward_claim);
    }

    $rew_id = $reward_claim->id;

    $query = db_select('eck_reward','rew');
    $query->join('field_data_field_reward_claim_id','claim_id','claim_id.entity_id = rew.id');
    $query->fields('rew',array('title','id','uid','type'));
    $query->fields('claim_id',array('field_reward_claim_id_target_id'));
    $query->condition('type','reward_claim');
    $query->condition('uid',$account_id,'=');
    $query->condition('id',$rew_id,'=');
    $result = $query->execute()
    ->fetchAll();

    foreach($result as $reward_msg){
      $res_title = $reward_msg->title;
      $res_id = $reward_msg->id;
      $res_uid = $reward_msg->uid;
      $res_type = $reward_msg->type;
      $res_entity_id = $reward_msg->field_reward_claim_id_target_id;

      $sub_query_msg = db_select('field_data_field_reward_message','msg');
      $sub_query_msg->join('field_data_field_reward_notification','noti','noti.entity_id = msg.entity_id');
      $sub_query_msg->fields('msg',array('field_reward_message_value'));
      $sub_query_msg->fields('noti',array('field_reward_notification_value'));
      $sub_query_msg->condition('msg.entity_id',$res_entity_id);
      $sub_query = $sub_query_msg->execute()->fetchAll();

      foreach($sub_query as $onscreen_msg){
        $msg_notifications = $onscreen_msg->field_reward_message_value;
        $mail_notifications = $onscreen_msg->field_reward_notification_value;
      }

      db_insert('reward_notification_patron')
       ->fields(array(
        'reward_name' => $res_title,
        'reward_id' => $res_id,
        'uid' => $res_uid,
        'type' => $res_type,
        'reward_notifications' => $msg_notifications,
        'reward_mail_notifications' => $mail_notifications,
        ))
       ->execute();
    }
}

/**
 * Creates a new raffle entry
 */
function play_library_program_create_raffle_entry($raffle_id, $account_id) {

  $user_uid = variable_get('follow_author');
  $author_name = user_load_by_name($user_uid);
  $author_uid = $author_name->uid;

  $raffles = entity_load('raffle', array($raffle_id));
  $raffle = reset($raffles);

  $title = t("@raffle on @time", array('@raffle' => $raffle->title, '@time' => date('Y-m-d H:i')));
  $raffle_entry = entity_create('raffle', array('type' => 'raffle_entry', 'title' => $title, 'uid' => $account_id));
  $raffle_entry->field_raffle_entry_raffle[LANGUAGE_NONE][0]['target_id'] = $raffle->id;
  entity_save('raffle', $raffle_entry);

  $query = db_select('field_data_field_reward_message', 'fdfrm');
  $query->join('field_data_field_reward_raffle', 'fdfrf', 'fdfrf.entity_id = fdfrm.entity_id');
  $query->join('field_data_field_reward_notification', 'fdfrn', 'fdfrn.entity_id = fdfrf.entity_id');
  $query->condition('field_reward_raffle_target_id', $raffle_id);
  $query->fields('fdfrm', array('field_reward_message_value'));
  $query->fields('fdfrn', array('field_reward_notification_value'));
  $res = $query->execute()->fetchAll();
  $message = $res[0]->field_reward_message_value;
  $notification = $res[0]->field_reward_notification_value;
  $notification_subject = "Congratulations! You've earned a raffle ticket.";

  privatemsg_new_thread(array(user_load($account_id)), $notification_subject, $notification,array('author'=>user_load($author_uid)));
  drupal_set_message($message);
}

/**
 * Creates a new badge entry.
 */
function play_library_program_add_user_badge($badge_id, $account_id) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'badge');
    $query->entityCondition('bundle', 'user_badge');
    $query->propertyCondition('uid', $account_id);
    $query->fieldCondition('field_user_badge_id', 'target_id', $badge_id);
    $count = $query->count()->execute();
    if (!empty($count)) {
        return;
    }

    $badges = entity_load('badge', array($badge_id));
    $badge = reset($badges);
    $title = t("@badge on @time", array('@badge' => $badge->title, '@time' => date('Y-m-d H:i')));
    $user_badge = entity_create('badge', array('type' => 'user_badge', 'title' => $title, 'uid' => $account_id));
    $user_badge->field_user_badge_id[LANGUAGE_NONE][0]['target_id'] = $badge->id;
    entity_save('raffle', $user_badge);
}

function _play_library_program_get_webforms() {
    $query = db_select('webform', 'w');
    $query->join('node', 'n', 'w.nid = n.nid');
    $query->fields('n');
    return $query->execute()->fetchAllAssoc('nid');
}

/**
 * Performs general firing hook check to create new activity entries
 */
function _play_library_program_invoke_activity_entry_hooks($entity, $type, $invoked_hook = '', $update_points = 0) {

  $entity_nid = $entity->nid;

  $query = db_select('node_revision','nr')
  ->fields('nr',array('vid'))
  ->condition('nid',$entity_nid)
  ->execute();

  $num_of_nodes = $query->rowCount();

    $hook = $invoked_hook;
    if (empty($hook)) {
        $hook = "entity_insert|{$type}|{$entity->type}";
    }

  if($num_of_nodes <= 2){

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'activity');
    $query->entityCondition('bundle', 'activity');
    $query->fieldCondition('field_activity_fired_hook', 'value', $hook);
    $result = $query->execute();

    foreach ($result as $entity_key => $entity_values) {
        if ($entity_key == 'activity') {

            foreach ($entity_values as $activity_entity) { //echo $i++;
                $account = user_load($entity->uid);
                if(!$update_points) {
                    play_library_program_create_activity_entry($activity_entity->id, $account->uid);
                }
                else {
                    global $user;
                    play_library_program_create_activity_entry($activity_entity->id, $user->uid);
                }
            }
        }
    }
  }
}

/**
 * Function to return activity frequency
 */
function _get_activity_frequency($aid) {
  $query = db_select('field_data_field_activity_limit', 'fal');
  $query->fields('fal', array('field_activity_limit_value'));
  $query->condition('entity_id', $aid);
  $results = $query->execute();
  foreach ($results as $result) {
    return $result->field_activity_limit_value;
  }
}

/**
 * Processes a reward claim.
 */
function _play_library_program_process_activity_entry($entity, $type) {

  // get the activity id and other details form $entity (activity entry).
  $activity_id = $entity->field_activity_entry_activity[LANGUAGE_NONE][0]['target_id'];
  $points_from_activity = $entity->field_activity_point[LANGUAGE_NONE][0]['value'];
  $activity_frequency = _get_activity_frequency($activity_id);
    
  // get the number of times user has performed the current activity
  $current_participation_count = play_library_program_retrieve_activity_participation($activity_id, $entity->uid);
    
  // call userpoint API to update user points
  if ($points_from_activity > 0 && $current_participation_count <= $activity_frequency) {
    $userpoints_txn = array(
      'uid' => $entity->uid,
      'points' => $points_from_activity,
    );
    userpoints_userpointsapi($userpoints_txn);
  }

  // get all the rewards associated with the activity
  $activity_rewards = _play_library_program_get_activity_reward_ids($activity_id, $current_participation_count, $entity->uid);
  $rewards_user_can_claim = check_rewards_user_can_claim($entity->uid, $activity_rewards, $activity_id);  
  $entity_info = entity_load('activity', array($activity_id));
  $firing_hook_type = $entity_info[$activity_id]->field_activity_fired_hook[LANGUAGE_NONE][0]['value'];

  if($firing_hook_type != 'node_update|node|sticker|updated'){
    $current_date = date("Y-m-d");
    if (function_exists('play_progress_teen_pl_activity_report_node_create')) { 
      pl_activity_report_node_create($activity_id, $current_date, 0, 1, $entity->uid);
    }
  }

  // if user won reward, update the progress report node to indicate 'reward won'
  // statu on the progress grid
  if(count($rewards_user_can_claim)) {
    if(isset($_SESSION['teen_progress_report_nid'])) {
      $progress_report_nid = $_SESSION['teen_progress_report_nid'];
      unset($_SESSION['teen_progress_report_nid']);

      db_update('field_data_field_won_reward')
      ->fields(array('field_won_reward_value' => 1))
      ->condition ('entity_id', $progress_report_nid)
      ->execute();
    }
  } else {
    if(isset($_SESSION['teen_progress_report_nid'])) {
      unset($_SESSION['teen_progress_report_nid']);
    }
  }
    
  foreach ($rewards_user_can_claim as $rid) {
    play_library_program_update_user_calendar_state($rid);
    play_library_program_create_reward_claim($rid, $entity->uid);
  }
}


/**
*  Check all the condition for reward claim
*/
function check_rewards_user_can_claim($account_id, $reward_ids, $activity_id) {

  // array to hold all rid's user can claim
  $rewards_user_can_claim = array();

  if(count($reward_ids)) {

    $uid = $account_id;
    $user = user_load($uid);

    if(array_key_exists(12, $user->roles)) {
      $profile_name = 'group_lead';
    }
    else {
      $profile_name = 'main';
    }

    $user_profile = profile2_load_by_user($account_id, $profile_name);

    if(is_object($user_profile)) {
    $dob = $user_profile->field_user_birthday[LANGUAGE_NONE][0]['value'];
    $time_stamp_dob = strtotime($dob);
    } else {
      $time_stamp_dob = $_SESSION['user_birth_dt'];
      unset($_SESSION['user_birth_dt']);
    }

    $current_time = time();
    $user_age = floor(($current_time - $time_stamp_dob) / (60*60*24*365));


    foreach ($reward_ids as $criteria_id => $rewards_id_ary) {
      // get list of activities that are eligible for reward claim
      $eligible_activities = get_eligible_activities($rewards_id_ary);

      // exit current iteration if no activity found to work on.
      if(!count($eligible_activities)) {
        continue;
      }

      // get all activity entries for given set of eligible activities
      $activity_entries_rs = get_activity_entries_for_eligible_activities($account_id, $eligible_activities);
      $activity_entry_count = $activity_entries_rs->rowCount();

      // variable to hold the points user can claim
      $total_user_points_for_claim = 0;
    
      if($activity_entry_count) {
        $user_activity_entries = array();
        while ($obj = $activity_entries_rs->fetchObject()) {
          $claimed_points = $obj->field_claimed_point_value;
          $activity_points = $obj->field_activity_point_value;
          $user_activity_entries[$obj->entity_id] = array(
            'claimed_points' => $claimed_points,
            'acivity_points' => $activity_points,
          );
          $total_user_points_for_claim += ($activity_points - $claimed_points);
        }
      }

      // fetch all reward criterias
      $reward_criteria_load = entity_load('reward', array($criteria_id));
      $reward_criteria_entity = reset($reward_criteria_load);
      //Check repetable or not
      $reward_criteria_repetable = $reward_criteria_entity->field_reward_criteria_repeatable[LANGUAGE_NONE][0]['value'];
      $reward_criteria_limit = $reward_criteria_entity->field_max_points[LANGUAGE_NONE][0]['value'];
      // points required to claim reward
      $reward_criteri_point = $reward_criteria_entity->field_reward_criteria_point_mark[LANGUAGE_NONE][0]['value'];
        
      // check if user has enough points to claim reward from current reward criteria
      //If the reward criteria is not repeatable
      if($reward_criteria_repetable == 0 ) {
        if($total_user_points_for_claim / $reward_criteri_point == 1 && $total_user_points_for_claim % $reward_criteri_point == 0 ) {
          $reward_criteria_start_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value'];
          $reward_criteria_end_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value2'];
          $reward_criteria_start_age = $reward_criteria_entity->field_start_age[LANGUAGE_NONE][0]['value'];
          $reward_criteria_end_age = $reward_criteria_entity->field_end_age[LANGUAGE_NONE][0]['value'];
          // validate reward for expiry and age limit
          $reward_expired = chk_reward_expiry($reward_criteria_start_date, $reward_criteria_end_date);

          if($reward_expired) {
            continue;
          } else {
            $user_age_valid = chk_user_age_for_reward($user_age, $reward_criteria_start_age, $reward_criteria_end_age);
            if(!$user_age_valid) {
              continue;
            }
          }

          // if all conditions meet, give all reward's to user
          foreach($rewards_id_ary as $reward_id) {
            $rewards_user_can_claim[] = $reward_id;
          }
        }
      }
       //If reward criteria is repetable
      else {
        if(isset($reward_criteria_limit)){
          // check claim points is less than reward limit points
          if($total_user_points_for_claim <= $reward_criteria_limit){
            if($total_user_points_for_claim / $reward_criteri_point >= 1 && $total_user_points_for_claim % $reward_criteri_point == 0 ) {
              $reward_criteria_start_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value'];
              $reward_criteria_end_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value2'];
              $reward_criteria_start_age = $reward_criteria_entity->field_start_age[LANGUAGE_NONE][0]['value'];
              $reward_criteria_end_age = $reward_criteria_entity->field_end_age[LANGUAGE_NONE][0]['value'];
              // validate reward for expiry and age limit
              $reward_expired = chk_reward_expiry($reward_criteria_start_date, $reward_criteria_end_date);

              if($reward_expired) {
                continue;
              } else {
                $user_age_valid = chk_user_age_for_reward($user_age, $reward_criteria_start_age, $reward_criteria_end_age);
                if(!$user_age_valid) {
                  continue;
                }
              }

              // if all conditions meet, give all reward's to user
              foreach($rewards_id_ary as $reward_id) {
                $rewards_user_can_claim[] = $reward_id;
              }
            }
          }         
        }else{
          if($total_user_points_for_claim / $reward_criteri_point >= 1 && $total_user_points_for_claim % $reward_criteri_point == 0 ) {
            $reward_criteria_start_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value'];
            $reward_criteria_end_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value2'];
            $reward_criteria_start_age = $reward_criteria_entity->field_start_age[LANGUAGE_NONE][0]['value'];
            $reward_criteria_end_age = $reward_criteria_entity->field_end_age[LANGUAGE_NONE][0]['value'];
            // validate reward for expiry and age limit
            $reward_expired = chk_reward_expiry($reward_criteria_start_date, $reward_criteria_end_date);

            if($reward_expired) {
              continue;
            } else {
              $user_age_valid = chk_user_age_for_reward($user_age, $reward_criteria_start_age, $reward_criteria_end_age);
              if(!$user_age_valid) {
                continue;
              }
            }

            // if all conditions meet, give all reward's to user
            foreach($rewards_id_ary as $reward_id) {
              $rewards_user_can_claim[] = $reward_id;
            }
          }
        }
      }
    }
  }
  return $rewards_user_can_claim;
}

/**
 * Function to update activity entry claimed points.
 *
 * @param
 *   $entity_id Number ID of the row to update
 *   $claimed_points Number New claimed points
 */
function update_activity_entry_claimed_points($entity_id, $claimed_points) {
  db_update('field_data_field_claimed_point')
  ->fields(array('field_claimed_point_value' => $claimed_points))
  ->condition ('entity_id', $entity_id)
  ->execute();
}

/**
 * Function to return all activities to associated to given rewards.
 *
 * @param Array $rewards_id_ary
 *   array of reward ID's
 *
 * @return Array $activities
 *  array of activity ID's linked with given rewards
 */
function get_eligible_activities($rewards_id_ary) {
  $activities = array();
  if(count($rewards_id_ary)) {
    $query = db_select('field_data_field_reward_criteria_activity', 'frca');
    $query->join('field_data_field_reward_criteria_reward', 'frcr', 'frca.entity_id = frcr.entity_id');
    $query->condition('frcr.field_reward_criteria_reward_target_id', $rewards_id_ary, 'IN');
    $query->fields('frca', array('field_reward_criteria_activity_target_id'));
    $result = $query->execute()->fetchAll();
    foreach ($result as $value) {
      $activities[] = $value->field_reward_criteria_activity_target_id;
    }
  }
  return $activities;
}

/**
 * Function to return activity entries for given set of activities
 *
 * @param Number $account_id
 *   user ID whose activity entries to be returned
 *
 * @param Array $eligible_activities
 *   array of activities for which activity entry is to be selected
 *
 * @return mysql resultset $res
 *   query resultset
 */
function get_activity_entries_for_eligible_activities($account_id, $eligible_activities) {
  // Query to fetch all activity entries related to set of activities that are
  // linked to the reward user can earn, based on current activity
  $que = db_select('eck_activity', 'eck_a');
  $que->join('field_data_field_activity_entry_activity', 'fdfae', 'fdfae.entity_id = eck_a.id');
  $que->join('field_data_field_claimed_point', 'fdcp', 'fdcp.entity_id = eck_a.id');
  $que->join('field_data_field_activity_point', 'fdfap', 'fdfap.entity_id = eck_a.id');
  $que->condition('eck_a.uid', $account_id);
  $que->condition('fdfae.field_activity_entry_activity_target_id', $eligible_activities, 'IN');
  $que->condition('fdcp.field_claimed_point_value', 'fdfap.field_activity_point_value', '<=');
  $que->fields('fdcp', array('field_claimed_point_value'));
  $que->fields('fdfap', array('field_activity_point_value'));
  $que->fields('fdfae', array('entity_id'));
  $res = $que->execute();
  return $res;
}



function chk_reward_expiry($criteria_start_date, $criteria_end_date) {
    $current_date = time();
    $start_date = strtotime($criteria_start_date);
    $end_date = strtotime($criteria_end_date);  
    if($current_date >= $start_date && $current_date <= $end_date) {
      return FALSE;
    } else {
      return TRUE;
    }
}

function chk_user_age_for_reward($user_age, $start_age, $end_age) {
  if($user_age >= $start_age && $user_age <= $end_age) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**play_library_program_create_reward_claim
 * Function to add reward claimed by user after an activity for calendar state
 */
function play_library_program_update_user_calendar_state($rid) {
    $cal_id = $_SESSION['usr_calendar_id'];
    unset($_SESSION['usr_calendar_id']);
    db_update('calendar')
        ->fields(array('reward_id' => $rid))
        ->condition ('id', $cal_id)
        ->execute();
}

/**
 * Processes a reward claim.
 */
function _play_library_program_process_user_reward_claim($entity, $type) {
    $account_uid = $entity->uid;
    if (is_object($account_uid)) {
        $account_uid = $account_uid->uid;
    }
    $rewards = entity_load('reward', array($entity->field_reward_claim_id[LANGUAGE_NONE][0]['target_id']));
    $reward = reset($rewards);
    // if (!empty($reward->field_reward_raffle)) {
    //      play_library_program_create_raffle_entry($reward->field_reward_raffle[LANGUAGE_NONE][0]['target_id'], $account_uid);
    // }
    if (!empty($reward->field_reward_badge)) {
        play_library_program_add_user_badge($reward->field_reward_badge[LANGUAGE_NONE][0]['target_id'], $account_uid);
    }
    _play_library_program_set_message($reward, $account_uid);
}

/**
 * Retrieves satisfied reward criteria based on global points.
 */
function _play_library_program_get_global_reward_ids($user_pre_points, $user_points, $account_uid) {
    global $user;
    if (empty($account_uid)) {
        $account = $user;
    }
    else {
        $account = user_load($account_uid);
    }

    // Create exclusion list of rewards which are tied to activities.
    $exclude_ids = array(-1);
    $date = "" . date('Y-m-d') . " 00:00:00";
    $query = db_select('field_data_field_reward_criteria_activity', 'fdfrca');
    $query->fields('fdfrca', array('entity_id'));
    $results = $query->execute();
    foreach ($results as $result) {
        $exclude_ids[] = $result->entity_id;
    }

    $rids = array();
    // Get the non-repeated rewards first.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'reward');
    $query->entityCondition('bundle', 'reward_criteria');
    $query->propertyCondition('id', $exclude_ids, 'NOT IN');
    $query->fieldCondition('field_reward_criteria_point_mark', 'value', $user_pre_points, '>');
    $query->fieldCondition('field_reward_criteria_point_mark', 'value', $user_points, '<=');
    $query->fieldCondition('field_reward_criteria_date_limit', 'value', $date, '<=');
    $query->fieldCondition('field_reward_criteria_date_limit', 'value2', $date, '>=');
    $query->fieldCondition('field_reward_criteria_repeatable', 'value', 0);
    $query->addTag('debug');
    $results = $query->execute();
    
    if (!empty($results['reward'])) {
        foreach($results['reward'] as $reward) {
            $reward_entities = entity_load('reward', array($reward->id));
            $reward_entity = reset($reward_entities);
            if (_play_library_program_reward_criteria_fulfilled($reward_entity, $account)) {
                foreach ($reward_entity->field_reward_criteria_reward[LANGUAGE_NONE] as $reward) {
                    $rids[] = $reward['target_id'];
                }
            }
        }
    }

    // Process the repeated ones next.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'reward');
    $query->entityCondition('bundle', 'reward_criteria');
    $query->propertyCondition('id', $exclude_ids, 'NOT IN');
    $query->fieldCondition('field_reward_criteria_date_limit', 'value', $date, '<=');
    $query->fieldCondition('field_reward_criteria_date_limit', 'value2', $date, '>=');
    $query->fieldCondition('field_reward_criteria_repeatable', 'value', 1);
    $results = $query->execute();
    if (!empty($results['reward'])) {
        foreach($results['reward'] as $reward) {
            $reward_entities = entity_load('reward', array($reward->id));
            $reward_entity = reset($reward_entities);
            $modulus = $reward_entity->field_reward_criteria_point_mark[LANGUAGE_NONE][0]['value'];
            for ($i = $user_points; $i > $user_pre_points; $i--) {
                if ($i % $modulus == 0) {
                    if (_play_library_program_reward_criteria_fulfilled($reward_entity, $account)) {
                        foreach ($reward_entity->field_reward_criteria_reward[LANGUAGE_NONE] as $reward) {
                            $rids[] = $reward['target_id'];
                        }
                    }
                }
            }
        }
    }

    return array_unique($rids);
}

/**
 * Function to return all rewards that are linked to an activity.
 */
function _play_library_program_get_activity_reward_ids($activity_id, $user_activity_completed, $account_uid = NULL) {
    global $user;
    if (empty($account_uid)) {
        $account = $user;
    }
    else {
        $account = user_load($account_uid);
    }

    $date = "" . date('Y-m-d') . " 00:00:00";
    $rids = array();
    // Get the non-repeated rewards first.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'reward');
    $query->entityCondition('bundle', 'reward_criteria');
    $query->fieldCondition('field_reward_criteria_activity ', 'target_id', $activity_id);
    //$query->fieldCondition('field_reward_criteria_point_mark', 'value', $user_activity_completed);
    $query->fieldCondition('field_reward_criteria_date_limit', 'value', $date, '<=');
    $query->fieldCondition('field_reward_criteria_date_limit', 'value2', $date, '>=');
    $query->fieldCondition('field_reward_criteria_repeatable', 'value', 0);
    $results = $query->execute();
    
    if (!empty($results['reward'])) {
        $rid = array();
        foreach($results['reward'] as $reward) {
            $reward_criteria_id = $reward->id;
            $reward_entities = entity_load('reward', array($reward_criteria_id));
            $reward_entity = reset($reward_entities);
            // check if the user (role) performing activity can receive the reward
            if (_play_library_program_reward_criteria_fulfilled($reward_entity, $account)) {
                foreach ($reward_entity->field_reward_criteria_reward[LANGUAGE_NONE] as $reward) {
                    // add the reward id into the arary of rewards that can be claimed.
                    $rid[] = $reward['target_id'];
                }
            }
            $rids[$reward_criteria_id] = array_unique($rid);
            $rid = array();
        }
    }

    // Process the repeated ones next.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'reward');
    $query->entityCondition('bundle', 'reward_criteria');
    $query->fieldCondition('field_reward_criteria_activity ', 'target_id', $activity_id);
    $query->fieldCondition('field_reward_criteria_date_limit', 'value', $date, '<=');
    $query->fieldCondition('field_reward_criteria_date_limit', 'value2', $date, '>=');
    $query->fieldCondition('field_reward_criteria_repeatable', 'value', 1);
    $results = $query->execute();

    if (!empty($results['reward'])) {
        $rid = array();
        foreach($results['reward'] as $reward) {
            $reward_criteria_id = $reward->id;
            $reward_entities = entity_load('reward', array($reward_criteria_id));
            $reward_entity = reset($reward_entities);
            // check if the user (role) performing activity can receive the reward
            if (_play_library_program_reward_criteria_fulfilled($reward_entity, $account)) {
              foreach ($reward_entity->field_reward_criteria_reward[LANGUAGE_NONE] as $reward) {
                // add the reward id into the arary of rewards that can be claimed.
                $rid[] = $reward['target_id'];
              }
            }
            
            if(array_key_exists($reward_criteria_id, $rids)) {
              $existing_rids = $rids[$reward_criteria_id];
              $rid = array_unique($rid);
              $merged_ary = array_merge($existing_rids, $rid);
              $rids[$reward_criteria_id] = $merged_ary;
            } else {
              $rids[$reward_criteria_id] = array_unique($rid);
            }
            $rid = array();
        }
    }
    return $rids;
}
/**
 * Creates a new message.
 */
function _play_library_program_set_message($reward, $account_uid) {
    /*
    // Only use this if we opt to switch back to using the MNC module. Would require debugging and further development.
    $notification_message = FALSE;
    if ($reward->type == 'physical_reward') {
        $notification_message = 'Congratulations, you just won a reward: ' . $reward->title;
    }
    if (!empty($notification_message)) {
        $message = message_create('user_notification_reward', array('uid' => $account_uid));

        $wrapper = entity_metadata_wrapper('message', $message);
        $wrapper->field_notification_message->set(array('value' => $notification_message, 'format' => filter_default_format()));
        $wrapper->save();
    }

    $options['mnc_recipients'] = array(
        array(
            'user' => user_load(1),
        ),
        array(
            'user' => $account_uid,
        ),
    );

    message_notify_send_message($message, $options, 'mnc_email');
    */

    // Send a privatemsg
    if (!module_exists('privatemsg')) {
        return;
    }
    if (!empty($reward->field_reward_notification)) {
        $options = array(
            'author' => user_load(1),
        );
        $recipient = user_load($account_uid);
        $subject = t('[OPL] Congratulations, you just won a prize!');
        $body = $reward->field_reward_notification[LANGUAGE_NONE][0]['value'];
        $result = privatemsg_new_thread(array($recipient), $subject, $body, $options);
    }
}

function _play_library_program_reward_criteria_fulfilled($reward_entity, $account) {
    $account_roles = array_keys($account->roles);
    $allowed = TRUE;

    if (count($reward_entity->field_reward_role_limits)) {
        foreach ($reward_entity->field_reward_role_limits[LANGUAGE_NONE] as $role) {
            if (in_array($role['value'], $account_roles)) {
                return $allowed = TRUE;
            } else {
                $allowed = FALSE;
            }
        }
    }
    
    return $allowed;
}
