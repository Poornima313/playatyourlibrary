<?php
/**
 * @file
 * A module for custom settings for teen program
 *
 * This module is basically for form alter, hook_menu,
 * custom blocks and program configuration settings
 */

/**
 * Implements hook_permission().
 */
function private_msg_custom_teen_permission() {
  return array(
    'progress_page_access' => array(
      'title' => t('View Progress Page Access'),
      'description' => t('Access to view progress page'),
    ),
  );
}

/**
 * Implements hook_date_combo_process_alter().
 *
 * Disabling of future dates for date of birth field
 */
function private_msg_custom_teen_date_combo_process_alter(&$element, &$form_state, $context){

  if($context['form']['#form_id'] == 'user_register_form' || $context['form']['#form_id'] == 'user_profile_form') {
    $element["value"]['#datepicker_options'] = array(
      'maxDate' => '+0D'
    );
    $element["value2"]['#datepicker_options'] = array(
      'maxDate' => '+0D'
    );
  }
}

/**
 * Implementation of hook_menu().
 */
function private_msg_custom_teen_menu() {
  $items['my-reviews'] = array(
    'title' => 'Reviews',
    'page callback' => 'user_reviews_teen',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['my-booklist'] = array(
    'title' => 'Booklist',
    'page callback' => 'user_booklist_teen',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['rewards'] = array(
    'title' => 'Rewards',
    'page callback' => 'program_badges_rewards',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  // Platform configuration settings for the program
  $items['admin/config/system/platform_configuration'] = array(
    'title' => 'Platform Configuration for teen program',
    'description' => 'Chilco platform configuration page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('platform_configuration_teen'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inc/platform_configuration_teen.inc',
    'file path' => drupal_get_path('module', 'private_msg_custom_teen'),
  );

  $items['profile_avatar'] = array(
    'title' => 'Profile Avatar',
    'description' => 'providing tabs for different avatars',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajax_avatar_profile_checkboxes'),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'inc/platform_configuration_teen.inc',
    'file path' => drupal_get_path('module', 'private_msg_custom_teen'),
  );

  // Platform details for the program
  $items['admin/config/system/platform_details'] = array(
    'title' => 'Platform Details for teen program',
    'description' => 'Chilco platform details page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('platform_details_teen'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inc/platform_details_teen.inc',
    'file path' => drupal_get_path('module', 'private_msg_custom_teen'),
  );

  //Activities Landing page
  $items['activities'] = array(
    'title' => 'Activities for the teen Summer Passport',
    'page callback' => 'activities_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'inc/hotspot_activities_block.inc',
    'file path' => drupal_get_path('module', 'private_msg_custom_teen'),
  );

  $items['progress'] = array(
    'page callback' => 'progress_report_grid',
    'access arguments' => array('progress_page_access'), // permission for view progress page
    'type' => MENU_CALLBACK,
    'file' => 'inc/progress_page.inc',
    'file path' => drupal_get_path('module', 'private_msg_custom_teen'),
  );

  $items['activity_custom_node_insert'] = array(
    'page callback' => 'activity_report_node_create',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'inc/progress_page.inc',
    'file path' => drupal_get_path('module', 'private_msg_custom_teen'),
  );

  $items['complete-activity-progress'] = array(
    'page callback' => 'complete_activity_progress',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'inc/progress_page.inc',
    'file path' => drupal_get_path('module', 'private_msg_custom_teen'),
  );

  $items['progress-print'] = array(
    'page callback' => 'progress_print_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'inc/progress_page.inc',
    'file path' => drupal_get_path('module', 'private_msg_custom_teen'),
  );

  $items['testing-cases'] = array(
    'page callback' => 'test_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements function to check if program is active or not.
 *
 * @return Boolean
 *   0 if not active, 1 if active 
 */
function is_program_active_teen() {

  $program_start_date = variable_get('pmc_start_date', 0);
  $program_end_date = variable_get('pmc_end_date', 0);
  if ($program_start_date && $program_end_date) {
    $now = time();
    $program_start_date = strtotime($program_start_date);
    $program_end_date = strtotime($program_end_date);

    if (($now >= $program_start_date) && ($now <= $program_end_date)) {
      return 1;
    } else {
      drupal_set_message("The program is currently closed.");
      return 0;
    }
  }
  return 1;
}

function private_msg_custom_teen_init() {

  $program_start_date = variable_get('pmc_start_date', 0);
  $program_end_date = variable_get('pmc_end_date', 0);
  $setting = array('private_msg_custom_teen' => array('proStart' => $program_start_date, 'proEnd' => $program_end_date));
  drupal_add_js($setting, 'setting');
  
}

/**
 * Implementation of hook_form_profile2_edif_PROFILE_NAME_form_alter()
 */
function private_msg_custom_teen_form_profile2_edit_main_form_alter(&$form, $form_state) {

  $form['profile_main']['field_user_avatar'] = array('#attributes' => array('style' => 'display:none'));

    $query = db_select('field_data_field_avatar_type','type');
    $query->fields('type',array('field_avatar_type_tid','entity_id'));
    $query->join('eck_user_avatar','eck','eck.id = type.entity_id');
    $query->join('taxonomy_term_data','tax','tax.tid = type.field_avatar_type_tid');
    $query->fields('tax',array('name'));
    $query->fields('eck',array('title'));
    $query_avatar = $query->execute()->fetchAll();
    $output = '';
    $output .= '<div style="border:1px solid red;">';

    foreach ($query_avatar as $key => $value) {
      $as = $value->name;
      $tax_name[$value->field_avatar_type_tid] = $value->name;
      $tax_name[$value->field_avatar_type_tid] = $value->name;
      $avatar_name[$value->field_avatar_type_tid][] = $value->entity_id;
    }

    foreach ($tax_name as $key => $value) {
      $output .= '<div style="border:1px solid blue; float:left;margin-left:10px">'. $value . '</div>';
    }

    $form['checkboxes_fieldset'] = array(
      '#title' => t("Avatars"),
      '#prefix' => '<div id="checkboxes-div">',
      '#suffix' => '</div>',
      '#type' => 'fieldset',
      '#weight' => 11,
    );

    $form['checkboxes_fieldset']['description'] = array('#markup' => '<div>' . t('What kind of avatar do you want?').'</div>');

    foreach ($tax_name as $key => $value) {
      $form['checkboxes_fieldset']['checkboxes_fieldset2'.$value] = array(
        '#title' => $value,
        '#prefix' => '<div id="checkboxes-d">',
        '#suffix' => '</div>',
        '#type' => 'fieldset',
        '#weight' => 11,
      );
      foreach ($avatar_name[$key] as $key1 => $value2) {
        $form['checkboxes_fieldset']['checkboxes_fieldset2'.$value]["avatar_checkbox-".$value2] = array(
          '#type' => 'radio',
          '#title' => avatar_images_list_teen($value2),
          '#prefix' => '<div class="avatar_radio">',
          '#suffix' => '</div>',
          '#attributes' => array(
            'class' => array('av_radio')
          )
        );
      } 
    }  
  array_unshift($form['#submit'], 'submit_for_avatar_teen');
}


function avatar_images_list_teen($value) {

  $query = db_select('field_data_field_avatar_image', 't');
  $query->join('file_managed', 'n', 'n.fid = t.field_avatar_image_fid');
  $result = $query
    ->fields('n', array('uri'))
    ->condition('t.entity_id', $value)
    ->execute()
    ->fetchAssoc();
  $img_uri_path = $result['uri'];
  $style = 'avatar_style';
  $img_path = image_style_url($style, $img_uri_path);
  $img = "<img src='$img_path'>";
  if ($img_uri_path){
    return $img;
  }
}

// providing program logo through platform configuration page
function program_logo_teen($value) {

  $imageFid = variable_get('pmc_progrm_image_teen');

  $query = db_select('file_managed', 'file')
            ->fields('file', array('uri'))
            ->condition('fid', $imageFid)
            ->execute()
            ->fetchAssoc();

  $img_uri_path = $query['uri'];
  $style = 'program_logo';
  $img_path = image_style_url($style, $img_uri_path);
  $img = "<img src='$img_path'>";
  if ($img_uri_path){
    return $img;
  }
}

function ajax_autocheckboxes_callback_avatar_teen($form, $form_state) {

  return $form['checkboxes_fieldset'];
}

// submit handler for create user account form.
function submit_for_avatar_teen($form, $form_state) {

  foreach ($form_state['values'] as $key => $value) {
    if($value === 'on'){
      $avatar_entity = 'avatar_checkbox-';
      $av_entity_id = strpos($key, $avatar_entity);

      if ($av_entity_id !== false) {
        // use sesion to pass avatar ID to profile presave hook.
        $_SESSION['user_avatar_id'] = substr($key, 16);
        break;
      }
    }
  }
}

/**
 * Implementation of hook_profile2_presave()
 */
function private_msg_custom_teen_profile2_presave($profile) {

  if (isset($_SESSION['user_avatar_id'])){
    $profile->field_user_avatar[LANGUAGE_NONE][0]['target_id'] = $_SESSION['user_avatar_id'];
    unset($_SESSION['user_avatar_id']);
  }
}

/**
 * Implementation of hook_form_alter()
 */
function private_msg_custom_teen_form_alter(&$form, &$form_state, $form_id) {

  $sub_title = variable_get('review_pre_header');
  $catalog_link = variable_get('catalog_link_for_teen_program');
  $library_abbreviation = variable_get('library_abbreviation_for_teen');
  $email_desc = variable_get('email_description_field');

  if($form_id == 'movie_review_node_form'){
    //hidding label for other option field
    $form['field_genre_other_option'][LANGUAGE_NONE][0]['value']['#title'] = NULL;
    $form['title']['#prefix'] = $sub_title;
    $form['field_catalog_link_movie_review'][LANGUAGE_NONE][0]['#description'] = 'Please enter a link to the movie in the <a href='.$catalog_link.' target="_blank">'.$library_abbreviation.' catalog</a> so that other readers can find it easily.';

    //Removing of N/A radio button
    unset($form['field_genre']['und']['#options']['_none']);
    unset($form['field_language']['und']['#options']['_none']);
    unset($form['field_rating']['und']['#options']['_none']);
    unset($form['field_please_select_one']['und']['#options']['_none']);

    //Changing default title
    drupal_set_title('Write a Movie Review');
  }

  if($form_id == 'music_review_node_form') {
    $form['field_artist_performer'][LANGUAGE_NONE][0]['#prefix'] = $sub_title;
    $form['title']['#title'] = t('Album or Song Title');
    $form['field_genre_other_option_music'][LANGUAGE_NONE][0]['value']['#title'] = NULL;
    $form['field_catalog_link_music'][LANGUAGE_NONE][0]['#description'] = 'Please enter a link to the music in the <a href='.$catalog_link.' target="_blank">'.$library_abbreviation.' catalog</a> so that other readers can find it easily.';

    unset($form['field_please_select_one_music']['und']['#options']['_none']);
    unset($form['field_genre_music']['und']['#options']['_none']);

    drupal_set_title('Write a Music Review');
  }

  if($form_id == 'video_game_review_node_form') {
    $form['title']['#prefix'] = $sub_title;
    $form['field_catalog_link_video_game'][LANGUAGE_NONE][0]['#description'] = 'Please enter a link to the video game in the <a href='.$catalog_link.' target="_blank">'.$library_abbreviation.' catalog</a> so that other readers can find it easily.';
    $form['field_platform_other_option'][LANGUAGE_NONE][0]['value']['#title'] = NULL;

    unset($form['field_please_select_videogame']['und']['#options']['_none']);
    unset($form['field_age_rating_of_game']['und']['#options']['_none']);

    drupal_set_title('Write a Video Game Review');
  }

  if($form_id == 'review_book_node_form') {
    $form['title']['#prefix'] = $sub_title;
    drupal_set_title('Write a Book Review');
  }

  if($form_id == 'booklist_node_form') {
    drupal_set_title('Create a Booklist');
  }

  if($form_id == 'review_activity_node_form') {
    $sel_options = $form['field_activity_type']['und']['#options'];
    foreach ($sel_options as $key => $value) {
      $activity_term = taxonomy_term_load($key);
      if(!empty($activity_term->field_hotspot_activity_type['und'][0]['value']) == 1){
        $opt[$key] = $value;
      }
    }
    $form['field_activity_type']['und']['#options'] = $opt;
    $form['field_activity_type']['#prefix'] = $sub_title;
    unset($form['field_privacy_settings']['und']['#options']['_none']);
    drupal_set_title('Write an Activity Review');
  }

  // Adding purchase link for booklist
  if($form_id == 'booklist_node_form') {
    $form['purchase_link'] = array(
      '#type' => 'link',
      '#title' => 'Suggest a purchase',
      '#href' => variable_get('pmc_purchase_link_teen'),
      '#attributes' => array('target' => '_blank'),
      '#weight' => 3,
    );
  }

  //Changing of description text for email field
  if($email_desc != ''){
    if($form_id == 'user_register_form'){
      $form['account']['mail']['#description'] = $email_desc;
    }
  }
  return $form;
}

function user_reviews_teen() {
  return '';
}

function user_booklist_teen() {
  return '';
}

function program_badges_rewards() {
  return '';
}

/**
 * Implements hook_block_info().
 */
function private_msg_custom_teen_block_info() {

  $blocks = array();
  $blocks['pm_block'] = array(
    'info' => t('Private Message Dashboard Block for teen program'),
  );

  $blocks['homepage_slider'] = array(
    'info' => t('Homepage booklist slider Block for teen program'),
  );

  $blocks['menu_for_mobile'] = array(
    'info' => t('Menu block for mobile for teen program'),
  );

  $blocks['write_review_block'] = array(
    'info' => t('Write a review block'),
  );

  $blocks['program_rewards_block'] = array(
    'info' => t('Program Rewards Block teen'),
  );

  $blocks['program_announcement_block'] = array(
    'info' => t('Program Announcement Block for landing page'),
  );

  $blocks['hotspot_activity_block'] = array(
    'info' => t('Hotspot activities block'),
  );

  $blocks['progress_submit_block'] = array(
    'info' => t('Progress Submit Block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function private_msg_custom_teen_block_view($delta = '') {
  $block = array();
  
  switch($delta) {
    case 'pm_block' :
      $block['content'] = pm_block_view_teen();
      break;

    case 'homepage_slider' :
      $block['content'] = homepage_slider_teen();
      break;

    case 'menu_for_mobile' :
      $block['content'] = header_menu_mobile_teen();
      break;

    case 'write_review_block' :
      $block['content'] = drupal_get_form('creating_review');
      break;

    case 'program_rewards_block' :
      $block['content'] = view_rewards_block();
      break;

    case 'program_announcement_block' :
      $block['content'] = announcement_block();
      break;

    case 'hotspot_activity_block' :
      $block['content'] = hotspot_activities();
      break;

    case 'progress_submit_block' :
      $block['content'] = drupal_get_form('progress_record');
      break;
  }
  
  return $block;
}

/**
 * Function callback for private_msg_custom_teen_block_view.
 */
function pm_block_view_teen() {

  global $user;
  $current_user = $user->uid;
  $new = '';

  $query_pm = db_select('pm_index','pi');
  $query_pm->fields('pi',array('mid','is_new','deleted'));
  $query_pm->join('pm_message','pmsg','pmsg.mid = pi.mid');
  $query_pm->join('users','u','u.uid = pmsg.author');
  $query_pm->fields('u',array('name'));
  $query_pm->condition('recipient',$current_user,'=');
  $query_pm->condition('deleted',0,'=');
  $query_pm->orderBy('timestamp', 'DESC');
  $query_pm->range(0,2);
  $query = $query_pm->execute()
  ->fetchAll();

  $no_result = count($query);
  $output = '<div class = "pm-custom">';

  if ($no_result != 0) {
    foreach($query as $res) {
      $msg_id = $res->mid;
      $deleted = $res->deleted;
      $author = $res->name;

      $result = db_select('pm_message','pm')
      ->fields('pm',array('subject','timestamp'))
      ->condition('mid',$msg_id,'=')
      ->execute()
      ->fetchAssoc();

      $pm_new = $res->is_new.'<br/>';
      if($pm_new == 1){
        $new = '<div class = "pm-new">'.'NEW! '.'</div>';
      }

      $output .= '<div class="pm">'.'<div class = "pm-subject"><a href = '.'../messages/view/'.$msg_id.'>'.$new.$pm_subject = $result['subject'].'</a></div>'.'<div class = "pm-admin">'.$author.'</div>'.'<div class = "pm-date">'.$pm_date = date('F d, Y',$result['timestamp']).'</div>'.'</div>';
    }
    return $output.'<a class="pm-view" href="../messages">View All Messages</a>'.'</div>';
  } else {
    return 'No Messages to display';
  }
}

/**
 * Function callback for homepage booklist slider.
 */
function homepage_slider_teen(){

  $output = '<ul class="booklist-pager"><input type="radio" name="colorRadio" id="r1" value="blslider1" checked><label for="r1"></label><input type="radio" name="colorRadio" id="r2" value="blslider2"><label for="r2"></label><input type="radio" name="colorRadio" id="r3" value="blslider3"><label for="r3"></label></ul>';
  $block = module_invoke('views', 'block_view', 'booklist_slideshow-block_2');
  $output .= '<div class="blslider1 slide">'. render($block['content']). '</div>';

  $block = module_invoke('views', 'block_view', 'booklist_slideshow-block_3');
  $output .= '<div class="blslider2 slide">'. render($block['content']). '</div>';

  $block = module_invoke('views', 'block_view', 'booklist_slideshow-block_4');
  $output .= '<div class="blslider3 slide">'. render($block['content']). '</div>';

  return $output;
}

/**
 * Function callback for header menu for mobile
 */
function header_menu_mobile_teen(){
  $output = '<div class = "mobile_menu">';

  $block = module_invoke('views', 'block_view', 'top_block-block_2');
  $output .= render($block['content']);

  $block = module_invoke('menu', 'block_view', 'menu-secoundary-menu-mobile');
  $output .= render($block['content']).'</div>';

  return $output;
}

/**
 * Function callback for creating reviews
 */
function creating_review($form, $form_state){

  global $base_url;

  $no_review = $base_url.'/reviews';
  $link_book_review = $base_url.'/node/add/review-book';
  $link_movie_review = $base_url.'/node/add/movie-review';
  $link_music_review = $base_url.'/node/add/music-review';
  $link_video_game_review = $base_url.'/node/add/video-game-review';
  $link_activity_review = $base_url.'/node/add/review-activity';

  $values = array(0 => t('Select Review'),
    $link_book_review => t('Book Reviews'),
    $link_activity_review => t('Activity Reviews'),
    $link_movie_review => t('Movie Reviews'),
    $link_music_review => t('Music Reviews'),
    $link_video_game_review => t('Video Game Reviews'));

  $form['review_options'] = array(
    '#title' => t('Write A Review'),
    '#type' => 'select',
    '#description' => t('Select Review type'),
    '#options' => $values,
    '#attributes' => array(
      'class' => array('add_review_node')
    )
  );

  return $form;
}

function view_rewards_block(){

  $block = module_invoke('views', 'block_view', 'program_rewards-block_1');
  $output = render($block['content']);

  $block = module_invoke('views', 'block_view', 'program_rewards_raffle-block_1');
  $output .= render($block['content']);

  return $output;
}

/**
 * function callback for hotspot activities block
 */
function hotspot_activities() {
  
  global $base_url;

  $link_book_review = $base_url.'/node/add/review-book';
  $link_movie_review = $base_url.'/node/add/movie-review';
  $link_music_review = $base_url.'/node/add/music-review';
  $link_video_game_review = $base_url.'/node/add/video-game-review';
  $link_booklist = $base_url.'/node/add/booklist';

  $view_book_review = $base_url.'/reviews';
  $view_movie_review = $base_url.'/movie-review';
  $view_music_review = $base_url.'/music-review-listing';
  $view_video_game_review = $base_url.'/video-game-review';
  $view_booklist = $base_url.'/booklists';
  $view_activity_review = $base_url.'/activities';

  $view_reviews = array(0 => t('Select from the following'),
  $view_book_review => t('Book Reviews'),
  $view_movie_review => t('Movie Reviews'),
  $view_music_review => t('Music Reviews'),
  $view_video_game_review => t('Video Game Reviews'));

  $add_reviews = array(0 => t('Select from the following'),
  $link_book_review => t('Book Reviews'),
  $link_movie_review => t('Movie Reviews'),
  $link_music_review => t('Music Reviews'),
  $link_video_game_review => t('Video Game Reviews'));

  $form['activity_title'] = array(
    '#type' => 'markup',
    '#markup' => variable_get('hotspot_block_title'),
    '#prefix' => '<div class="activity_title">',
    '#suffix' => '</div>',
    '#weight' => 1,
  );

  $form['activity_description'] = array(
    '#type' => 'markup',
    '#markup' => variable_get('hotspot_block_description'),
    '#prefix' => '<div class="activity_desc">',
    '#suffix' => '</div>',
    '#weight' => 2,
  );


  $form['activities_read_list'] = array(
    '#title' => t('Read Reviews of Bay Area Hot Spots'),
    '#type' => 'select',
    '#options' => activities_view_select_list('hotspot_activities','1'),
    '#attributes' => array(
      'class' => array('activities_list_read')
    ),
    '#weight' => 3,
  );

  global $user;
  $current_user = $user->uid;

  if($current_user != 0){
    $form['activities_submit_list'] = array(
      '#title' => t('Submit a Review'),
      '#type' => 'select',
      '#options' => activities_submit_select_list('hotspot_activities','1'),
      '#attributes' => array(
        'class' => array('activities_list_submit')
      ),
      '#weight' => 4,
    );
  }

  if($current_user != 0){
    $form['suggest_link'] = array(
      '#type' => 'link',
      '#title' => variable_get('hotspot_block_link_title'),
      '#href' => variable_get('hotspot_block_link'),
      '#attributes' => array('target' => '_blank'),
      '#prefix' => '<div class="suggest-link">',
      '#suffix' => '</div>',
      '#weight' => 5,
    );
  }

  $form['activity_review_title'] = array(
    '#type' => 'markup',
    '#markup' => variable_get('review_activity_block_title'),
    '#prefix' => '<div class="activity_review_title">',
    '#suffix' => '</div>',
    '#weight' => 6,
  );

  $form['activity_review_description'] = array(
    '#type' => 'markup',
    '#markup' => variable_get('review_activity_block_description'),
    '#prefix' => '<div class="activity_review_desc">',
    '#suffix' => '</div>',
    '#weight' => 7,
  );

  if($current_user != 0){
    $form['read_submit'] = array(
      '#title' => t('Write a Review'),
      '#type' => 'select',
      '#options' => $add_reviews,
      '#attributes' => array(
        'class' => array('reviews_add')
      ),
      '#weight' => 8,
    );
  }

  $form['read_reviews'] = array(
    '#title' => t('Read Existing Reviews'),
    '#type' => 'select',
    '#options' => $view_reviews,
    '#attributes' => array(
      'class' => array('reviews_list_view')
    ),
    '#weight' => 9,
  );

  return $form;
}


/**
 * function callback for progress block to report activity
 */
function progress_record($form,$form_state){

  $form['activity_progress_select'] = array(
    '#title' => t('I completed'),
    '#type' => 'select',
    '#options' => activities_view_select_option('hotspot_activities','1'),
    '#attributes' => array(
      'class' => array('activities_list_progress')
    ),
    '#weight' => 1,
  );

  $form['date'] = array(
    '#type' => 'date_popup', 
    '#title' => 'on',
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-0',
    '#datepicker_options' => array('maxDate' => '+0D'),
    '#weight' => 2, 
  );
  return $form;
}

function activities_view_select_option($term,$progress) {

  global $base_url;
  $voc = taxonomy_vocabulary_machine_name_load($term);
  $activity_term_vid = $voc->vid;
  $activities_terms = taxonomy_get_tree($activity_term_vid);

  foreach ($activities_terms as $key => $value) {
    $term_title = $value->name;
    $term_tid = $value->tid;
    $activity_term = taxonomy_term_load($term_tid);
    if($activity_term->field_progress_page_term['und'][0]['value'] == $progress){
      $select_options[] = array();
      $select_options[0] = 'Select activity';
      $select_options[$term_tid] = $term_title;
    }
  }
  return $select_options;
}

/**
 * function callback for progress page
 */
function progress_report_grid(){
  
  drupal_add_js( drupal_get_path('module', 'private_msg_custom_teen') . '/js/private_msg_custom_teen.js');
  return theme('progress-report');
}

/**
 * template for progress page
 */
function private_msg_custom_teen_theme(){

  $templates = array(
   'progress-report' => array(
    'template' => 'templates/progress_page',
  ));

  return $templates;
}

/**
 * function for saving taxonomy term on creation of activity.
 */
function activities_term_save($term, $fire_hook, $activity) {

  $voc = taxonomy_vocabulary_machine_name_load($term);
  $activity_term_vid = $voc->vid;
  $activity_id = $activity->id;
  $activity_title = $activity->title;
  $activity_hotspot_value = $activity->field_hotspot_activity['und'][0]['value'];
  $activity_firehook = $activity->field_activity_fired_hook['und'][0]['value'];
  $activity_progress_page = $activity->field_show_on_progress_page['und'][0]['value'];

  $query = db_select('field_data_field_activity_id','activity_id')
    ->fields('activity_id',array('field_activity_id_value','entity_id'))
    ->condition('field_activity_id_value',$activity_id)
    ->execute()
    ->fetchAssoc();

  $field_activity_id = $query['field_activity_id_value'];
  $entity_field_id = $query['entity_id'];

  if(!isset($field_activity_id)){
    if($activity_firehook == $fire_hook){
      $hotspot_activity_term = new stdClass();
      $hotspot_activity_term->name = $activity_title;
      $hotspot_activity_term->vid = $activity_term_vid; // The ID of the parent vocabulary
      $hotspot_activity_term->parent = 0; // This tells taxonomy that this is a top-level term
      
      taxonomy_term_save($hotspot_activity_term);
      $tid_term = $hotspot_activity_term->tid;
      $activity_term = taxonomy_term_load($tid_term);

      $activity_term->field_activity_id['und'][0]['value'] = $activity_id; 
      $activity_term->field_hotspot_activity_type['und'][0]['value'] = $activity_hotspot_value ? $activity_hotspot_value:0;
      $activity_term->field_progress_page_term['und'][0]['value'] = $activity_progress_page ? $activity_progress_page:0;
      taxonomy_term_save($activity_term);
      }
  }else if(isset($field_activity_id)) {
    $hotspot_query = db_select('taxonomy_term_data','tax')
      ->fields('tax',array('tid'))
      ->condition('tid',$entity_field_id)
      ->execute()
      ->fetchAssoc();

    $tid = $hotspot_query['tid'];
    if($activity_firehook != $fire_hook){
      taxonomy_term_delete($tid);
    }else{
      $activity_term = taxonomy_term_load($tid);
      $activity_term->field_activity_id['und'][0]['value'] = $activity_id; 
      $activity_term->field_hotspot_activity_type['und'][0]['value'] = $activity_hotspot_value;
        $activity_term->field_progress_page_term['und'][0]['value'] = $activity_progress_page;
        $activity_term->name = $activity_title;
      taxonomy_term_save($activity_term);
    }
  }
}

function activities_taxonomy_term_delete($term, $activity){

  $voc = taxonomy_vocabulary_machine_name_load($term);
  $activity_id = $activity->id;

  $query = db_select('field_data_field_activity_id','activity_id')
    ->fields('activity_id',array('field_activity_id_value','entity_id'))
    ->condition('field_activity_id_value',$activity_id)
    ->execute()
    ->fetchAssoc();

  $entity_field_id = $query['entity_id'];

  $hotspot_query = db_select('taxonomy_term_data','tax')
    ->fields('tax',array('tid'))
    ->condition('tid',$entity_field_id)
    ->execute()
    ->fetchAssoc();

  $tid = $hotspot_query['tid'];

  if(isset($tid)){
    taxonomy_term_delete($tid);
  }
}

function activity_report_node_create($activity_id, $activity_date, $term_tid, $check_in_progress = 0, $current_user = 0) {

  $entity_info = entity_load('activity', array($activity_id));
  $activity_name = $entity_info[$activity_id]->title;
  $hotspot_activity_type = $entity_info[$activity_id]->field_hotspot_activity['und'][0]['value'];
  $activity_progress_status = $entity_info[$activity_id]->field_show_on_progress_page['und'][0]['value'];
  $_SESSION['progress_activity_id']= $activity_id;

  // check activity 'show in progress' status
  if($check_in_progress) {
    if(!$activity_progress_status) {
      return FALSE;
    }
  }
  // if show in progress is one, node is created.
  if($current_user == 0){
    global $user;
    $current_user = $user->uid;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node') // grab nodes
  ->entityCondition('bundle', 'activity_report') // filter by activity_report type
  ->propertyCondition('status', 1) // filter by published
  ->propertyCondition('uid', $current_user)  // filter by current user
  ->count(); // count

  $num_of_nodes = $query->execute();
  $grids = variable_get('no_of_grids');

  //comparing nodes created with number of grids available
  // if($num_of_nodes < $grids){
    $node = new stdClass(); // Creating a new node object
    $node->type = 'activity_report'; //Content type
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node);
    $node->title = $activity_name;
    $node->status = 1;
    $node->uid = $current_user;
    $node->field_activity_id_report[LANGUAGE_NONE][0]['value'] = $activity_id;
    $node->field_hotspot_activity_report[LANGUAGE_NONE][0]['value'] = $hotspot_activity_type;
    $node->field_show_on_progress_report[LANGUAGE_NONE][0]['value'] = $activity_progress_status;
    $node->field_term_id[LANGUAGE_NONE][0]['value'] = $term_tid;
    $node->field_completion_date[LANGUAGE_NONE][0]['value'] = $activity_date;
    node_save($node);
    $created_nid = $node->nid;

    $_SESSION['teen_progress_report_nid'] = $created_nid;
  // }
}

/**
 * Getting of rafle count for the user
 */
function raffle_count($uid){

  $query = db_select('eck_raffle','raf')
    ->fields('raf',array('id'))
    ->condition('uid',$uid)
    ->condition('type','raffle_entry')
    ->execute();
  $num = $query->rowCount();

  return $num;
}
   
/**
 * Function for testing purposes
 */

function test_page() {
  return '';
}

// function for statistical report according to stamps earned
function user_nodes_three_stamps($uid){

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'activity_report')
    ->propertyCondition('uid', $uid)
    ->count()
    ->execute();

  if($entities == 3){
    return FALSE;
  }else{
    return TRUE;
  }
}

function user_nodes_six_stamps($uid){

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'activity_report')
    ->propertyCondition('uid', $uid)
    ->count()
    ->execute();

  if($entities == 6){
    return FALSE;
  }else{
    return TRUE;
  }
}

function user_nodes_nine_stamps($uid){

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'activity_report')
    ->propertyCondition('uid', $uid)
    ->count()
    ->execute();

  if($entities == 9){
    return FALSE;
  }else{
    return TRUE;
  }
}

function user_nodes_twelve_stamps($uid){

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'activity_report')
    ->propertyCondition('uid', $uid)
    ->count()
    ->execute();

  if($entities == 12){
    return FALSE;
  }else{
    return TRUE;
  }
}

function user_nodes_fifteen_stamps($uid){

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'activity_report')
    ->propertyCondition('uid', $uid)
    ->count()
    ->execute();

  if($entities == 15){
    return FALSE;
  }else{
    return TRUE;
  }
}

function user_nodes_eighteen_stamps($uid){

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'activity_report')
    ->propertyCondition('uid', $uid)
    ->count()
    ->execute();

  if($entities == 18){
    return FALSE;
  }else{
    return TRUE;
  }
}