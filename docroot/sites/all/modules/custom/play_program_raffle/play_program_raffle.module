<?php

/**
 * Implements hook_permission(). 
 */
function play_program_raffle_permission() {
  return array(
    'activity record access' => array(
      'title' => t('Administer activity record'),
      'description' => t('Perform administration tasks for activity record.'),
    ),
    'raffle_access_permission' => array(
      'title' => t('Administer Raffle access'),
      'description' => t('Perform administration tasks for raffle access.'),
    ),
  );
} 

/**
 * Implements hook_block(). . 
 */
function play_program_raffle_block_info() {
  $block = array();
  $blocks['staff-notes'] = array(
    'info' => t('Write Staff notes'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['progress-block'] = array(
    'info' => t('Progress'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['user_progress_for_program'] = array(
    'info' => t('User Progress block for program'),
    'cache' => DRUPAL_NO_CACHE,
    );
  return $blocks;
}

function play_program_raffle_block_view($block_name = '') {
  switch ($block_name) {
    case 'staff-notes':
    $block['subject'] = '';
    $block['content'] = drupal_get_form('generate_staff_form');
    break;
    case 'progress-block':
    $block['subject'] = '';
    $block['content'] = user_progress();
    break;
    case 'user_prize_block':
    $block['subject'] = '';
    $block['content'] = progress_user_block();
    break;
    case 'user_progress_for_program':
    $block['subject'] = '';
    $block['content'] = progress_user_block_program();
    break;                                
  }
  return $block;
}


/* Progress block of user on program page */
function progress_user_block_program() {
  global $user, $base_url;
  $uid = $user->uid;
  $count_query = db_query("SELECT COUNT(image_url) as image_url
    FROM {calendar} c
    WHERE c.uid = :uid",array(':uid' => $uid))->fetchAll();
  $total_read_days = $count_query[0]->image_url;

  // get all rewards
  $qry = db_select('field_data_field_activity_fired_hook', 'fh');
  $qry->join('field_data_field_activity_points', 'ap', 'ap.entity_id = fh.entity_id');
  $qry->Join('field_data_field_reward_criteria_activity', 'rca', 'fh.entity_id = rca.field_reward_criteria_activity_target_id');
  $qry->Join('field_data_field_reward_criteria_point_mark', 'rcpm', 'rca.entity_id = rcpm.entity_id');
  $qry->fields('rcpm', array('field_reward_criteria_point_mark_value'));
  $qry->fields('ap', array('field_activity_points_value'));
  $qry->condition('fh.field_activity_fired_hook_value', 'node_update|node|sticker|updated');
  $rs = $qry->execute()->fetchAll();
  
  $activity_point = 0;
  $next_reward_in_days = 0;
  $user_points = 0;
  $closest_reward = 0;

  foreach($rs as $v) {
    if (!$activity_point) {
      $activity_point = $v->field_activity_points_value;
      $user_points = $total_read_days * $activity_point;
    }

    $reward_point = $v->field_reward_criteria_point_mark_value;
    if ($reward_point > $user_points) {
      if(!$closest_reward) {
        $closest_reward = $reward_point;
      } else {
        if($reward_point < $closest_reward) {
          $closest_reward = $reward_point;
        }
      }
    }
  }

  $reads_for_next_reward = ($closest_reward / $activity_point) - $total_read_days;
  if($reads_for_next_reward < 0) {
    return t("<div class='all_rewrad_won'>Congratulations! You have completed the reading program and have received all the reading rewards.</div>");
  }
  else {
    if($reads_for_next_reward == 1) {
      $msg = t("<span class='msg-highlight'>Total days read: $total_read_days</span><br/>");
      $msg .= t("<div class='days-left'>$reads_for_next_reward more day of reading needed to receive your next prize</div>");
      $msg .= t("<div><a href='".$base_url."/progress'>Go to the Progress Page</a></div>");
    }
    else {
      $msg = t("<span class='msg-highlight'>Total days read: $total_read_days</span><br/>");
      $msg .= t("<div class='days-left'>$reads_for_next_reward more days of reading needed to receive your next prize</div>");
      $msg .= t("<div><a href='".$base_url."/progress'>Go to the Progress Page</a></div>");
    }
    

    return "<div>$msg</div>";
  }
}


function generate_staff_form($form, &$form_state) {
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => 'Staff Notes',
    
    );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));  

  return $form;
}

function generate_staff_form_submit($form, &$form_state) {
  $staff_note = $form_state['complete form']['body']['#value'];
  $custom_uid = arg(1);
  $profile = profile2_create(array('type' => 'main', 'uid' => $custom_uid));
  $profile->field_staff_notes['und'][0]['value'] = $staff_note; 
  profile2_save($profile);
  drupal_set_message(t('Notes created.'));

  
}


function play_program_raffle_menu() {
  $items['raffle'] = array(
    'title' => 'Draw Raffle Winners',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ppr_raffle_entry_process'),
    'access arguments' => array('raffle_access_permission'),
    'type' => MENU_CALLBACK,
  );
  $items['raffle_filter_form'] = array(
    'title' => 'Raffle Process',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('raffle_entry_form'),
    'access arguments' => array('raffle_access_permission'),
    'type' => MENU_CALLBACK,
  );
  $items['raffle_pro'] = array(
    'title' => 'Raffle Process',
    'page callback' => 'render_raffle_filter_form',
    'access arguments' => array('raffle_access_permission'),
    'type' => MENU_CALLBACK,
  );
  $items['raffle_user_list'] = array(
    'title' => 'Raffle Process',
    'page callback' => 'raffle_user_list',
    'access arguments' => array('raffle_access_permission'),
    'type' => MENU_CALLBACK,
  );
  $items['raffle_winner'] = array(
    'title' => 'Raffle winner Process',
    'page callback' => 'raffle_winner_ajax',
    'access arguments' => array('raffle_access_permission'),
    'type' => MENU_CALLBACK,
  );
  $items['raffle_winner_list'] = array(
    'title' => 'Raffle Winner List',
    'page callback' => 'raffle_winner_user_list',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['generate_csv'] = array(
    'title' => 'Generate csv file of raffle user list',
    'page callback' => 'generate_csv_of_raffle_user',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['raffle_table'] = array(
    'title' => 'Raffle Entry Detailed List',
    'page callback' => 'ppr_entery_detailed_list',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function ppr_entery_detailed_list(){
  return 'Hello';
}

/* hook menu() for raffle winner user list */

function raffle_winner_user_list() {
  $query = db_select('eck_reward', 'er');
  $query->join('users', 'u', 'u.uid = er.uid');
  $query->join('field_data_field_reward_claim_id', 'frcid', 'er.id = frcid.entity_id');
  $query->join('field_data_field_reward_raffle', 'frr', 'frcid.field_reward_claim_id_target_id = frr.entity_id');
  $query->join('eck_raffle', 'eckr', 'eckr.id = frr.field_reward_raffle_target_id');
  $query->fields('er', array('uid'));
  $query->fields('u', array('name'));
  $query->fields('eckr', array('title'));
  $res = $query->execute()->fetchAll();
  $table_header = array(
    'Sl No.',
    'Raffle Name',
    'Raffle Winner Name'
  );
  $table_rows = array();
  $i = 0;
  foreach ($res as $value) {
    
    $raffle_winner_name = $value->name;
    $raffle_title = $value->title;
    $i++;
    $table_rows[] = array(
      array( 'data' => $i),
      array( 'data' => $raffle_title),
      array( 'data' => $raffle_winner_name),
    ); 
  }

  $output = theme('table', array( 'header' => $table_header, 'rows' => $table_rows ));

  return $output;
} 

/**
 * function for getting all the active raffle rewards
 */
function ppr_active_rafle_list(){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','reward');
  $query->entityCondition('bundle','reward');
  $query->fieldCondition('field_category','value','raffle_reward');
  $query->fieldCondition('field_status_reward','value','active');
  $result = $query->execute();

  if (isset($result['reward'])) {
    $raffle_rewards_id = array_keys($result['reward']);
    $raffle_rewards = entity_load('reward', $raffle_rewards_id);
  }

  foreach ($raffle_rewards as $raffle) {
    $options_raffle[0] = 'Select Raffle';
    $options_raffle[$raffle->id] = $raffle->title;
  }
  return $options_raffle;
  //echo '<pre>'; print_r($options_raffle);
}

/**
 * function for raffle entry page
 */
function ppr_raffle_entry_process($form, &$form_state) {

  $school = _get_options('schools');
  $library_branch = _get_options('library_branch');
  $grade = _get_options('grade');

  $form['active_raffle'] = array(
    '#type' => 'select',
    '#options' => ppr_active_rafle_list(), 
  );

  $form['raffle_list'] = array(
    '#type' =>'markup',
    '#markup' => t("<a href = '#'>Show list of all the winners in this raffle</a>"),
  );

  $form['name_raffle'] = array(
    '#title' => t('Name of Drawing'),
    '#type' => 'textfield',
    '#description' => 'Please enter Branch or Systemwide',
  );

  $form['library_branch'] = array(
    '#title' => t('Library Branch'),
    '#type' => 'select',
    '#options' => $library_branch, 
  );

  $form['school'] = array(
    '#title' => t('School'),
    '#type' => 'select',
    '#options' => $school, 
  );

  $form['grade'] = array(
    '#title' => t('Grade'),
    '#type' => 'select',
    '#options' => $grade, 
  );

  $form['user_dob'] = array(
    '#type' => 'fieldset', 
    '#title' => t('User Date of Birth'),
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  $form['user_dob']['dob_from'] = array(
    '#title' => t('From'),
    '#type' => 'textfield',
  );

  $form['user_dob']['dob_to'] = array(
    '#title' => t('To'),
    '#type' => 'textfield',
  );

  $form['pervious_this_wnrs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include previous winners in this raffle'),
    '#attributes' => array('value' => 2),
  );

  $form['pervious_all_wnrs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include previous winners in all raffle'),
  );

  $form['winners_selected'] = array(
    '#title' => t('Number of winners to be selected'),
    '#type' => 'textfield',
    // '#desription' => t(''),
  );

  $form['raff_winners'] = array(
    '#type' =>'markup',
    '#markup' => t("<input type = 'button' value = 'Draw Winners' id = 'raff_winners'>"),
  );

  $form['raffle_tb'] = array(
    '#type' =>'markup',
    '#markup' => t("<div id ='reward_tbl' data-reveal-id='myModal'></div>"),
  );

  return $form;

}

/* For rendering the raffle filter form */

function render_raffle_filter_form($form, &$form_state) {
  echo drupal_render(drupal_get_form('raffle_entry_form'));
}

function raffle_winners_tbl($uname, $fname, $lname, $bday, $email, $phn_number, $rf_drawing_name, $filtr_used) {
  $tbl_rows[] = array(
    array( 'data' => $uname),
    array( 'data' => $fname),
    array( 'data' => $lname),
    array( 'data' => $bday),
    array( 'data' => $email),
    array( 'data' => $phn_number),
    array( 'data' => $rf_drawing_name),
    array( 'data' => $filtr_used),
  );
  return $tbl_rows;
}


function getTable($result , $raffle_id, $rf_drawing_name, $winners_selected, $rf_grade, $rf_library, $rf_sch, $rf_all, $rf_this) {
  $arraySize = sizeof($result);
  
  for( $i = 0; $i < $arraySize; $i++) {

    $user_profile = profile2_load_by_user($result[$i]->uid, 'main');
    $user_branch = $user_profile->field_library_branch['und'][0]['tid'];
    $user_grade = $user_profile->field_user_grade['und'][0]['tid'];
    $user_school = $user_profile->field_school['und'][0]['tid'];
    $fname = $user_profile->field_first_name['und'][0]['value'];
    $lname = $user_profile->field_last_name['und'][0]['value'];
    $bday = $user_profile->field_user_birthday['und'][0]['value'];
    $email = $user_profile->field_email['und'][0]['email'];
    $phn_number = $user_profile->field_phone_number['und'][0]['value'];
    $time_stamp_dob = strtotime($bday);
    $current_time = time();
    $user_age = floor(($current_time - $time_stamp_dob) / (60*60*24*365));

    $rf_library_name = taxonomy_term_load($rf_library);
    $rf_library_name = $rf_library_name->name;

    $rf_sch_name = taxonomy_term_load($rf_sch);
    $rf_sch_name = $rf_sch_name->name;

    $rf_grade_name = taxonomy_term_load($rf_grade);
    $rf_grade_name = $rf_grade_name->name;

    $filters_used = $rf_library_name.' ,'.$rf_sch_name.' ,'.$rf_grade_name;

    $addEntry = FALSE;

    $raffle_id = $result[$i]->id;

    $u_age = FALSE;
    if(($rf_dob_sdate >= $user_age) && ($rf_dob_edate <= $user_age)){
      $u_age = TRUE;
    }

    if($user_branch == $rf_library && $rf_sch == NULL && $rf_grade == NULL && $u_age == FALSE){ //1
      $addEntry = TRUE;
    }else if ($rf_library == NULL && $rf_sch === $user_school && $rf_grade == NULL && $u_age == FALSE){ //2
      $addEntry = TRUE;
    }else if ($rf_library == NULL && $rf_sch == NULL && $rf_grade == $user_grade && $u_age == FALSE){ //3
      $addEntry = TRUE;
    }else if ($rf_library == NULL && $rf_sch == NULL && $rf_grade == NULL && $u_age == TRUE){ //4
      $addEntry = TRUE;
    }else if ($user_branch == $rf_library && $rf_sch == $user_school && $rf_grade == NULL && $u_age == FALSE){ //5
      $addEntry = TRUE;
    }else if ($user_branch == $rf_library && $rf_sch == NULL && $rf_grade == $user_grade && $u_age == FALSE){ //6
      $addEntry = TRUE;
    }else if ($user_branch == $rf_library && $rf_sch == NULL && $rf_grade == NULL && $u_age == TRUE){ //7
      $addEntry = TRUE;
    }else if ($rf_library == NULL && $rf_sch == NULL && $rf_grade == $user_grade && $u_age == TRUE){ //8
      $addEntry = TRUE;
    }else if ($rf_library == NULL && $rf_sch == $user_school && $rf_grade == NULL && $u_age == TRUE){ //9
      $addEntry = TRUE;
    }else if ($user_branch == $rf_library && $rf_sch == $user_school && $rf_grade == $user_grade && $u_age == FALSE){ //10
      $addEntry = TRUE;
    }else if ($user_branch == $rf_library && $rf_sch == NULL && $rf_grade == $user_grade && $u_age == TRUE){ //11
      $addEntry = TRUE;
    }else if ($user_branch == $rf_library && $rf_sch == $user_school && $rf_grade == NULL && $u_age == TRUE){ //12
      $addEntry = TRUE;
    }else if ($rf_library == NULL && $rf_sch == $user_school && $rf_grade == $user_grade && $u_age == TRUE){ //13
      $addEntry = TRUE;
    }else if ($user_branch == $rf_library && $rf_sch == $user_school && $rf_grade == $user_grade && $u_age == TRUE){ //14
      $addEntry = TRUE;
    }else if ($rf_library == NULL && $rf_sch == NULL && $rf_grade == NULL && $u_age == FALSE){ //15
      $addEntry = FALSE;
    }

    if ($addEntry) {
      $realDeal[] = array(
        $user_ki_ids = array(
          'uid' => $result[$i]->uid,
          'rew_id' => $result[$i]->id
        ),
        $tbl_rows[] = array(
          array( 'data' => $result[$i]->name),
          array( 'data' => $fname),
          array( 'data' => $lname),
          array( 'data' => $bday),
          array( 'data' => $email),
          array( 'data' => $phn_number),
          array( 'data' => $rf_drawing_name),
          array( 'data' => $filters_used),
        )
      );
    }
  }
  return $realDeal;
}

/* Raffle user list by filter form */

function raffle_user_list($form, &$form_state) {

  $tbl_header = array(
    'Username',
    'First name',
    'Last name',
    'Date of birth',
    'Email Address',
    'Phone Number',
    'Name of Drawing',
    'Filters Used'
  );

  $raffle_id = $_POST['raffle_id'];
  $rf_drawing_name = $_POST['rf_drawing_name'];
  $winners_selected = $_POST['no_needed'];
  $rf_grade = $_POST['rf_grade'];
  $rf_library = $_POST['rf_library'];
  $rf_sch = $_POST['rf_sch'];
  $rf_all = $_POST['rf_all'];
  $rf_this = $_POST['rf_this'];

  $query = db_select('eck_reward','eck');
  $query->join('field_data_field_rf_receieved_reward','rf_win','eck.id = rf_win.entity_id');
  $query->join('field_data_field_raffle_claim_id','claim','eck.id = claim.entity_id');
  $query->join('users','u','u.uid = eck.uid');
  $query->fields('u', array('name','uid'));
  $query->fields('eck', array('id'));
  $query->condition('eck.type','raffle_claim');
  $query->condition('rf_win.field_rf_receieved_reward_value', 0);
  $query->condition('claim.field_raffle_claim_id_target_id', $raffle_id);
  $query->distinct('u.uid');
  $result = $query->execute()->fetchAll();

  $query_inc_allWinners = db_select('eck_reward','eck');
  $query_inc_allWinners->join('field_data_field_raffle_claim_id','claim','eck.id = claim.entity_id');
  $query_inc_allWinners->join('users','u','u.uid = eck.uid');
  $query_inc_allWinners->fields('u', array('name','uid'));
  $query_inc_allWinners->fields('eck', array('id'));
  $query_inc_allWinners->condition('eck.type','raffle_claim');
  $query_inc_allWinners->condition('claim.field_raffle_claim_id_target_id', $raffle_id);
  $query_inc_allWinners->distinct('u.uid');
  $result_inc_allWinners = $query_inc_allWinners->execute()->fetchAll();

  $query_draw = db_select('eck_reward','eck');
  $query_draw->join('field_data_field_raffle_claim_id','claim','eck.id = claim.entity_id');
  $query_draw->join('field_data_field_raffle_drawing_name','rf_draw','eck.id = rf_draw.entity_id');
  $query_draw->join('users','u','u.uid = eck.uid');
  $query_draw->fields('u', array('name','uid'));
  $query_draw->fields('eck', array('id'));
  $query_draw->condition('eck.type','raffle_claim');
  $query_draw->condition('claim.field_raffle_claim_id_target_id', $raffle_id);
  $query_draw->condition('rf_draw.field_raffle_drawing_name_value', $rf_drawing_name);
  $query_draw->distinct('u.uid');
  $result_draw = $query_draw->execute()->fetchAll();

  $query_all = db_select('eck_reward','eck');
  $query_all->join('field_data_field_raffle_claim_id','claim','eck.id = claim.entity_id');
  $query_all->join('field_data_field_rf_receieved_reward','rf_win','eck.id = rf_win.entity_id');
  $query_all->join('users','u','u.uid = eck.uid');
  $query_all->fields('u', array('name','uid'));
  $query_all->fields('eck', array('id'));
  $query_all->condition('eck.type','raffle_claim');
  $query_all->condition('claim.field_raffle_claim_id_target_id', $raffle_id);
  $query_all->condition('rf_win.field_rf_receieved_reward_value', '0');
  $query_all->distinct('u.uid');
  $result_win = $query_all->execute()->fetchAll();
  
  if($rf_all) {
    $result = $result_inc_allWinners;
  } else if ($rf_this) {
    $result = $result_draw;
  } else {
    $result = $result_win;
  }

  $tbl_rows = getTable($result, $raffle_id, $rf_drawing_name, $winners_selected, $rf_grade, $rf_library, $rf_sch, $rf_all, $rf_this);
  $arraySizeRows = sizeof($tbl_rows);
  $arraySizeRows--;
  $randomValues = UniqueRandomNumbersWithinRange(0,$arraySizeRows,$winners_selected);

  foreach ($randomValues as $key => $value) {

    $tbl_row[] = $tbl_rows[$value][1];

    $uid = $tbl_rows[$value][0]['uid'];
    $rw_id = $tbl_rows[$value][0]['rew_id'];

    pl_reward_claim($raffle_id, $uid, 'reward', $filters_used, $rf_drawing_name);
    update_raffle_winner_tbl($rw_id, $rf_drawing_name);
  }
  
  if (!empty($tbl_rows)) {
    $output = theme('table', array( 'header' => $tbl_header, 'rows' => $tbl_row));
    $output .= "<div class = 'raffle-list-submit'>";
    echo $output;
  }else{
    echo t('No Result Found');
  }
}

function update_raffle_winner_tbl($raffle_id, $rf_drawing_name) {
  db_update('field_data_field_rf_receieved_reward')
    ->fields(array('field_rf_receieved_reward_value' => 1))
    ->condition('entity_id', $raffle_id)
    ->execute();

  db_update('field_data_field_raffle_drawing_name')
    ->fields(array('field_raffle_drawing_name_value' => $rf_drawing_name))
    ->condition('entity_id', $raffle_id)
    ->execute();
}

function UniqueRandomNumbersWithinRange($min, $max, $quantity) {
    $numbers = range($min, $max);
    shuffle($numbers);
    return array_slice($numbers, 0, $quantity);
}

function generate_csv_of_raffle_user() {
  $output = array();
  $raffle_id = $_GET['raffle_id'];
  $reward_id = $_GET['reward_id'];
  $school = $_GET['school'];
  $organization = $_GET['organization'];
  $library_branch = $_GET['library_branch'];
  $grade = $_GET['grade'];

  $query = db_select('field_data_field_raffle_entry_raffle', 'rentry');
  $query->join('eck_raffle', 'eck_r', 'rentry.entity_id = eck_r.id');
  $query->join('users', 'u', 'u.uid = eck_r.uid');
  $query->join('profile', 'p', 'u.uid = p.uid');
  $query->join('field_data_field_user_first_name', 'fn', 'fn.entity_id = p.pid');
  $query->join('field_data_field_user_last_name', 'ln', 'ln.entity_id = p.pid');
  $query->join('field_data_field_user_birthday', 'user_birth', 'user_birth.entity_id = p.pid');
  $query->leftJoin('field_data_field_user_phone', 'phno', 'phno.entity_id = p.pid');
  if($library_branch == '') {
    $query->leftJoin('field_data_field_library_branch', 'lb', 'lb.entity_id = p.pid');
    $query->leftJoin('taxonomy_term_data', 'lbtd', 'lbtd.tid = lb.field_library_branch_tid');
  }
  

  $cnd = array();
  if ($school != '') {
    $query->leftJoin('field_data_field_school', 'fs', 'fs.entity_id = p.pid');
    $query->leftJoin('taxonomy_term_data', 'fstd', 'fstd.tid = fs.field_school_tid');
    $cnd[] = array('fs.field_school_tid', $school);
  }

  if ($organization != '') {
    $query->join('field_data_field_user_organization', 'uo', 'uo.entity_id = p.pid');
    $query->join('taxonomy_term_data', 'uotd', 'uotd.tid = uo.field_user_organization_tid');
    $cnd[] = array('uo.field_user_organization_tid', $organization);
  }

  if ($library_branch != '') {
    $query->join('field_data_field_library_branch', 'lb', 'lb.entity_id = p.pid');
    $query->join('taxonomy_term_data', 'lbtd', 'lbtd.tid = lb.field_library_branch_tid');
    $cnd[] = array('lb.field_library_branch_tid', $library_branch);
  }

  if ($grade != '') {
    $query->join('field_data_field_user_grade', 'ug', 'ug.entity_id = p.pid');
    $query->join('taxonomy_term_data', 'ugtd', 'ugtd.tid = ug.field_user_grade_tid');
    $cnd[] = array('ug.field_user_grade_tid', $grade);
  }

  $query->condition('rentry.field_raffle_entry_raffle_target_id', $raffle_id, '=');
  if (count($cnd)) {
    foreach($cnd as $val) {
      $cnd_fld = $val[0];
      $cnd_val = $val[1];
      $query->condition($cnd_fld, $cnd_val);
    }
  }
  $query->fields('eck_r', array('uid'));
  $query->fields('u', array('name', 'mail'));
  $query->fields('fn', array('field_user_first_name_value'));
  $query->fields('ln', array('field_user_last_name_value'));
  $query->fields('user_birth', array('field_user_birthday_value'));
  $query->fields('lbtd', array('name'));
  $query->fields('phno', array('field_user_phone_value'));
  $query->orderBy('name', 'ASc');
  $res = $query->execute()->fetchAll();

  $raffle_users_list = array();
  
  foreach($res as $v) {
    $uid = $v->uid;
    $user_roles = user_load($uid);
    $role_name = array_values($user_roles->roles);
    $role_name = $role_name[1];
    $name = $v->name;
    $library_branch = $v->lbtd_name;
    $first_name = $v->field_user_first_name_value;
    $last_name = $v->field_user_last_name_value;
    $date_of_birth = $v->field_user_birthday_value;
    $phone_no = $v->field_user_phone_value;
    $mail = $v->mail;
    // if (array_key_exists($uid, $raffle_users_list)) {
    //   $temp = $raffle_users_list[$uid];
    //   $temp['count'] = $temp['count'] + 1;
    //   $raffle_users_list[$uid] = $temp;
    // } else {
      // check if this user has won raffel before
      $qry = db_select('eck_raffle', 'r');
      $qry->condition('r.uid', $uid);
      $qry->condition('r.type', 'raffle_winner');
      $qry->fields('r', array('id'));
      $rs = $qry->execute();
      $count = $rs->rowCount();

      if ($count) {
        $raffle_users_list[] = array('serial_no.' => $i, 'raffle_winner' => 'Yes', 'name' => $name, 'library_branch' => $library_branch, 'user_role' => $role_name, 'first_name' => $first_name, 'last_name' => $last_name, 'date_of_birth' => $date_of_birth, 'phone_no' => $phone_no, 'mail' => $mail);
      } else {
        $raffle_users_list[] = array('serial_no.' => $i, 'raffle_winner' => 'No', 'name' => $name, 'library_branch' => $library_branch, 'user_role' => $role_name, 'first_name' => $first_name, 'last_name' => $last_name, 'date_of_birth' => $date_of_birth, 'phone_no' => $phone_no, 'mail' => $mail);
      }
    //}
  }

  $i = 1;

  foreach($raffle_users_list as $k => $v) {      
      $user_name = $v['name'];
      $user_role = $v['user_role'];
      $first_name = $v['first_name'];
      $last_name = $v['last_name'];
      $library_branch = $v['library_branch'];
      $date_of_birth = $v['date_of_birth'];
      $phone_no = $v['phone_no'];
      $email = $v['mail'];
      //$raffle_count = $v['count'];
      if($user_name == '') {
        $user_name = ' ';  
      }
      else {
        $user_name = $v['name'];  
      }
      if($user_role == '') {
        $user_role = ' ';  
      }
      else {
        $user_role = $v['user_role'];  
      }
      if($library_branch == '') {
        $library_branch = ' ';  
      }
      else {
        $library_branch = $v['library_branch'];  
      }

      if($first_name == '') {
        $first_name = ' ';  
      }
      else {
        $first_name = $v['first_name'];  
      }
      if($last_name == '') {
        $last_name = ' ';  
      }
      else {
        $last_name = $v['last_name'];  
      }
      if($date_of_birth == '') {
        $date_of_birth = ' ';  
      }
      else {
        $date_of_birth = $v['date_of_birth'];  
      }
      if($phone_no == '') {
        $phone_no = ' ';
      }
      else {
        $phone_no = $v['phone_no'];  
      }
      if($email == '') {
        $email = ' ';
      }
      else {
        $email = $v['mail'];
      }
      // if($raffle_count == '') {
      //   $raffle_count = ' ';
      // }
      // else {
      //   $raffle_count = $v['count'];
      // }
      
    $raffle_winner = $v['raffle_winner'];
    $operation = t("<input class = 'raffle-prospective-winners' type = 'checkbox' id = 'chkbox_$k'>");
    $output[] = array(
      'Serial_no.' => $i, 
      'name' => $user_name,
      'user_role' => $user_role, 
      'first_name' => $first_name,
      'last_name' => $last_name,
      'library_branch' => $library_branch,
      'date_of_birth' => $date_of_birth,
      'phone_no' => $phone_no,
      'email' => $email,
      //'number_of_tickets' => $raffle_count,
    );
    $i++;
  }

  $time = date('m-d-Y', time());

  $filename = 'raffle_ticket_list_' .$time. '.csv'; 

  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename =' .$filename);
  $result = '';
  $keys = array(
    'Serial no.',
    'Name',
    'User role',
    'First name',
    'Last name',
    'Library branch',
    'Date of birth',
    'Phone no',
    'Email'
  );


  $result .= implode(",", $keys) . "\n";
  if (count($output)) {
    foreach ($output as $val) {
      $result .= implode(",", $val) . "\n";
    }
  }
  echo $result;
  exit;
}

function _get_options($vocab_name) {
  $term_list = taxonomy_vocabulary_machine_name_load($vocab_name);
  $tree = taxonomy_get_tree($term_list->vid);
  $options = array();
  $options[''] = '- Select -';
  foreach ($tree as $value) {
    $options[$value->tid] = $value->name;
  }
  return $options;
}


/* active raffle user list  */

function raffle_entry_form($form, &$form_state) {
  $school_options = _get_options('schools');
  $organization_options = _get_options('organization');
  $librarybranches_options = _get_options('library_branches');
  $grade_options = _get_options('grade');

  $form['school'] = array(
    '#title' => t('School'),
    '#type' => 'select',
    '#options' => $school_options, 
  );
  $form['organization'] = array(
    '#title' => t('Organization'),
    '#type' => 'select',
    '#options' => $organization_options,
  ); 
  $form['library_branch'] = array(
    '#title' => t('Library Branch'),
    '#type' => 'select',
    '#options' => $librarybranches_options,
  );
  $form['grade'] = array(
    '#title' => t('Grade'),
    '#type' => 'select',
    '#options' => $grade_options,
  );
  $form['button'] = array(
    '#value' => 'Submit',
    '#type' => 'button',
    '#id' => 'raffle_form_button',
  );
  
  return $form;


  
}


/* Raffle winner list process */

function raffle_winner_ajax() { 
  $active_raffle_uid = $_REQUEST['active_raffle_uid'];
  $reward_id = $_REQUEST['reward_id'];
  
  $raffle_uid = explode(',', $active_raffle_uid);
  
  $raffle_id = $_SESSION['active_r_id'];

  foreach ($raffle_uid as $k => $v) {
    
     play_library_program_create_raffle_winner($raffle_id, $v);
     play_library_program_create_reward_claim($reward_id, $v, 1);
  }
  echo "1";
  
}



function user_progress() {
  global $user;
  $uid = $user->uid;
  $count_query = db_query("SELECT COUNT(image_url) as image_url
    FROM {calendar} c
    WHERE c.uid = :uid",array(':uid' => $uid))->fetchAll();
  $total_read_days = $count_query[0]->image_url;

  // get all rewards
  $qry = db_select('field_data_field_activity_fired_hook', 'fh');
  $qry->join('field_data_field_activity_points', 'ap', 'ap.entity_id = fh.entity_id');
  $qry->Join('field_data_field_reward_criteria_activity', 'rca', 'fh.entity_id = rca.field_reward_criteria_activity_target_id');
  $qry->Join('field_data_field_reward_criteria_point_mark', 'rcpm', 'rca.entity_id = rcpm.entity_id');
  $qry->fields('rcpm', array('field_reward_criteria_point_mark_value'));
  $qry->fields('ap', array('field_activity_points_value'));
  $qry->condition('fh.field_activity_fired_hook_value', 'node_update|node|sticker|updated');
  $rs = $qry->execute()->fetchAll();
  
  $activity_point = 0;
  $next_reward_in_days = 0;
  $user_points = 0;
  $closest_reward = 0;

  foreach($rs as $v) {
    if (!$activity_point) {
      $activity_point = $v->field_activity_points_value;
      $user_points = $total_read_days * $activity_point;
    }

    $reward_point = $v->field_reward_criteria_point_mark_value;
    if ($reward_point > $user_points) {
      if(!$closest_reward) {
        $closest_reward = $reward_point;
      } else {
        if($reward_point < $closest_reward) {
          $closest_reward = $reward_point;
        }
      }
    }
  }

  $reads_for_next_reward = ($closest_reward / $activity_point) - $total_read_days;

  if($reads_for_next_reward < 0) {
    return t("<div class='all_rewrad_won'>Congratulations! You have completed the reading program and have received all the reading rewards.</div>");
  }
  else {
      if($reads_for_next_reward == 1) {
        $msg = t("<span class='msg-highlight'>Total days read: $total_read_days</span><br/>");
        $msg .= t("$reads_for_next_reward more day of reading needed to receive your next prize");
        $msg .= t("<a href = '../progress' class = 'button'>Show My Progress</a>");
      }
      else {
        $msg = t("<span class='msg-highlight'>Total days read: $total_read_days</span><br/>");
        $msg .= t("$reads_for_next_reward more days of reading needed to receive your next prize");
        $msg .= t("<a href = '../progress' class = 'button'>Show My Progress</a>");
      }
    return "<div>$msg</div>";
  }
}




function play_program_raffle_menu_alter(&$items) {
  global $user;
  if($user->roles[1] == 'anonymous user') {
    $items['staff/register']['access callback'] = FALSE;

  }
}