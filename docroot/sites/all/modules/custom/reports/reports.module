<?php

/**
 * Implements hook_menu().
 */
function reports_menu(){
	$items = array();
 //  $items['registrations-per-library-branch'] = array(
 //    'title' => t('Number of registrations per library branch'),
 //    'page callback' => 'registrationPerBranch',
 //    'access callback' => TRUE,
 //  );

  $items['reading-per-library-branch'] = array(
    'title' => t('Days of Reading per Library Branch'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('readingPerBranch'),
    // 'page callback' => 'readingPerBranch',
    'access callback' => TRUE,
  );

  $items['reading-per-school'] = array(
    'title' => t('Days of Reading per School'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('readingPerSchool'),
    // 'page callback' => 'readingPerBranch',
    'access callback' => TRUE,
  );

  $items['registrations-per-school'] = array(
    'title' => t('Registrations per School'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registrationPerSchool'),
    'access callback' => TRUE,
  );

  $items['registrations-per-library-branch'] = array(
    'title' => t('Registrations per Library Branch'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registrationPerBranch'),
    'access callback' => TRUE,
  );

  $items['registrations-test'] = array(
    'title' => t('Testing purposes'),
    'page callback' => 'all_activities',
    'access callback' => TRUE,
  );

  return $items;
}


/**
 * Access Callback for /projects page.
 */
function access_check() {
  global $user;
  if($user->uid)
    return TRUE;
  return FALSE;
}

/**
 * Function callback for generating report for number of reading days.
 * Based on library branch
 */
function readingPerBranch($form, $form_state) {

  $options = all_activities();

  $form['activity'] = array(
    '#type' => 'select',
    '#title' => 'Activity',
    '#options' => $options,
    '#multiple' => TRUE,
    );

  $form['participation_count_from'] = array(
    '#type' => 'textfield',
    '#title' => 'Participation Count From',
    );

  $form['participation_count_to'] = array(
    '#type' => 'textfield',
    '#title' => 'Participation Count To',
    );

  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
  );

  $form['output_table'] = array(
    '#markup' => $_SESSION['outputReg'],
  );

  unset($_SESSION['outputReg']);
  return $form;

}

function readingPerBranch_submit($form, &$form_state) {

  $activityIds = $form_state['values']['activity'];
  $countFrom = $form_state['values']['participation_count_from'];
  $countTo = $form_state['values']['participation_count_to'];

  if(!empty($activityIds)) {
    $sub_query = db_select('eck_activity', 'act');
    $sub_query->join('field_data_field_activity_entry_activity','actEntry','actEntry.entity_id = act.id');
    $sub_query->fields('act', array('uid'));
    $sub_query->condition('actEntry.field_activity_entry_activity_target_id',$activityIds);
    $sub_query->groupBy('act.uid');
    $sub_query->addExpression('COUNT(actEntry.entity_id)', 'actCount');

    if(!empty($countFrom)) {
      $sub_query->having('actCount >= '.$countFrom);
    }

    if(!empty($countTo)) {
      $sub_query->having('actCount <= '.$countTo);
    }

    $sub = $sub_query->execute()->fetchAll();

    foreach ($sub as $value) {
      $actUsers[] = $value->uid;
    }

    if(!empty($actUsers)){
      $query = db_select('users','u');
      $query->fields('u', array('uid'));
      $query->join('profile', 'pf', 'pf.uid = u.uid');
      $query->fields('pf', array('pid'));
      $query->join('field_data_field_library_branch','branch','branch.entity_id = pf.pid');

      $query->condition('u.uid', $actUsers, 'IN');
      $query->fields('branch', array('field_library_branch_tid'));
      $query->groupBy('branch.field_library_branch_tid');
      $query->addExpression('COUNT(u.uid)', 'userCount');
      $result = $query->execute()->fetchAll();
    }
  }

  $rows = array();

  foreach ($result as $value) {

    $term = taxonomy_term_load($value->field_library_branch_tid);
    $name = $term->name;

    $rows[] = array(
      $name,
      $value->userCount,
    );
  }

  $header = array('Library Branch', 'Number of Users');
  $_SESSION['outputReg'] = theme('table', array('header' => $header, 'rows' => $rows));

}

function all_activities() {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','activity');
  $query->entityCondition('bundle','activity');
  $result = $query->execute();

  if (isset($result['activity'])) {
    $activity_id = array_keys($result['activity']);
    $activity = entity_load('activity', $activity_id);
  }

  foreach ($activity as $act) {
    $options_activity[$act->id] = $act->title;
  }

  return $options_activity;
}

/**
 * Function callback for generating report for number of reading days.
 * Based on library branch
 */
function readingPerSchool($form, $form_state) {

  $options = all_activities();

  $form['activity'] = array(
    '#type' => 'select',
    '#title' => 'Activity',
    '#options' => $options,
    '#multiple' => TRUE,
    );

  $form['participation_count_from'] = array(
    '#type' => 'textfield',
    '#title' => 'Participation Count From',
    );

  $form['participation_count_to'] = array(
    '#type' => 'textfield',
    '#title' => 'Participation Count To',
    );

  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
  );

  $form['output_table'] = array(
    '#markup' => $_SESSION['outputReg'],
  );

  unset($_SESSION['outputReg']);
  return $form;

}

function readingPerSchool_submit($form, &$form_state) {

  $activityIds = $form_state['values']['activity'];
  $countFrom = $form_state['values']['participation_count_from'];
  $countTo = $form_state['values']['participation_count_to'];

  if(!empty($activityIds)) {
    $sub_query = db_select('eck_activity', 'act');
    $sub_query->join('field_data_field_activity_entry_activity','actEntry','actEntry.entity_id = act.id');
    $sub_query->fields('act', array('uid'));
    $sub_query->condition('actEntry.field_activity_entry_activity_target_id',$activityIds);
    $sub_query->groupBy('act.uid');
    $sub_query->addExpression('COUNT(actEntry.entity_id)', 'actCount');

    if(!empty($countFrom)) {
      $sub_query->having('actCount >= '.$countFrom);
    }

    if(!empty($countTo)) {
      $sub_query->having('actCount <= '.$countTo);
    }

    $sub = $sub_query->execute()->fetchAll();

    foreach ($sub as $value) {
      $actUsers[] = $value->uid;
    }

    if(!empty($actUsers)){
      $query = db_select('users','u');
      $query->fields('u', array('uid'));
      $query->join('profile', 'pf', 'pf.uid = u.uid');
      $query->fields('pf', array('pid'));
      $query->join('field_data_field_school','sch','sch.entity_id = pf.pid');

      $query->condition('u.uid', $actUsers, 'IN');
      $query->fields('sch', array('field_school_tid'));
      $query->groupBy('sch.field_school_tid');
      $query->addExpression('COUNT(u.uid)', 'userCount');
      $result = $query->execute()->fetchAll();
    }
  }

  $rows = array();

  foreach ($result as $value) {

    $term = taxonomy_term_load($value->field_school_tid);
    $name = $term->name;

    $rows[] = array(
      $name,
      $value->userCount,
    );
  }

  $header = array('School', 'Number of Users');
  $_SESSION['outputReg'] = theme('table', array('header' => $header, 'rows' => $rows));

}


/**
 * Function callback for generating report for number of reading days.
 * Based on library branch
 */
function registrationPerBranch($form, $form_state) {

  $options = all_activities();

  $form['activity'] = array(
    '#type' => 'select',
    '#title' => 'Activity',
    '#options' => $options,
    '#multiple' => TRUE,
    );

  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
  );

  $form['output_table'] = array(
    '#markup' => $_SESSION['outputReg'],
  );

  unset($_SESSION['outputReg']);
  return $form;

}

function registrationPerBranch_submit($form, &$form_state) {

  $activityIds = $form_state['values']['activity'];

  if(!empty($activityIds)) {

    $query = db_select('users','u');
    $query->fields('u', array('uid'));
    $query->join('profile', 'pf', 'pf.uid = u.uid');
    $query->fields('pf', array('pid'));
    $query->join('field_data_field_library_branch','branch','branch.entity_id = pf.pid');
    $query->fields('branch', array('field_library_branch_tid'));
    $query->groupBy('branch.field_library_branch_tid');
    $query->addExpression('COUNT(u.uid)', 'userCount');
    $result = $query->execute()->fetchAll();

  }

  $rows = array();

  foreach ($result as $value) {

    $term = taxonomy_term_load($value->field_library_branch_tid);
    $name = $term->name;

    $rows[] = array(
      $name,
      $value->userCount,
    );
  }

  $header = array('Library Branch', 'Number of Users');
  $_SESSION['outputReg'] = theme('table', array('header' => $header, 'rows' => $rows));

}

/**
 * Function callback for generating report for number of reading days.
 * Based on library branch
 */
function registrationPerSchool($form, $form_state) {

  $options = all_activities();

  $form['activity'] = array(
    '#type' => 'select',
    '#title' => 'Activity',
    '#options' => $options,
    '#multiple' => TRUE,
    );

  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
  );

  $form['output_table'] = array(
    '#markup' => $_SESSION['outputReg'],
  );

  unset($_SESSION['outputReg']);
  return $form;

}

function registrationPerSchool_submit($form, &$form_state) {

  $activityIds = $form_state['values']['activity'];


  if(!empty($activityIds)) {

    $query = db_select('users','u');
    $query->fields('u', array('uid'));
    $query->join('profile', 'pf', 'pf.uid = u.uid');
    $query->fields('pf', array('pid'));
    $query->join('field_data_field_school','sch','sch.entity_id = pf.pid');
    $query->fields('sch', array('field_school_tid'));
    $query->groupBy('sch.field_school_tid');
    $query->addExpression('COUNT(u.uid)', 'userCount');
    $result = $query->execute()->fetchAll();

  }

  $rows = array();

  foreach ($result as $value) {

    $term = taxonomy_term_load($value->field_school_tid);
    $name = $term->name;

    $rows[] = array(
      $name,
      $value->userCount,
    );
  }

  $header = array('School', 'Number of Users');
  $_SESSION['outputReg'] = theme('table', array('header' => $header, 'rows' => $rows));

}
